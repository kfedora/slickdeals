HTTP/1.1 200 OK
X-Powered-By: PHP/7.2.31
Last-Modified: Thu, 27 Aug 2020 21:20:42 GMT
ETag: "pub1598563242;gz"
Content-Type: application/x-javascript; charset=utf-8
Referrer-Policy: strict-origin-when-cross-origin
Server: Apache
X-Akamai-Path-Stats: [1:28224:776]
Vary: Accept-Encoding
Cache-Control: public, max-age=10297
Expires: Sun, 25 Oct 2020 20:12:54 GMT
Date: Sun, 25 Oct 2020 17:21:17 GMT
Transfer-Encoding:  chunked
Connection: keep-alive
Connection: Transfer-Encoding
Server-Timing: cdn-cache; desc=HIT
Server-Timing: edge; dur=5
Strict-Transport-Security: max-age=86400

(function(sdWindow) {
    $(sdWindow).load(function()
    {
        var $globalBar = $('#globalBar');
        if ($globalBar.length == 0 || $globalBar.is('[data-simple-header]'))
        {
            return;
        }

        $(document).ready(function()
        {
            var deferInitClassRemoval = false;
            var globalNavItems = '.globalNav > ul > li';

            $("#nojs").removeAttr("id");

            var activateFunc = (function()
            {
                var subPanes = $(".subPane");
                return function activateFunc(row)
                {
                    var jqRow = $(row),
                        rowContent = jqRow.find(".subPane");
                    subPanes.hide();
                    rowContent.show();
                    jqRow.addClass("active");
                };
            }());

            function deactivateFunc(row)
            {
                var jqRow = $(row),
                    rowContent = jqRow.find(".subPane");
                rowContent.hide();
                jqRow.removeClass("active");
            }

            $(".globalNav ul li > .subContainer").menuAim({
                activate: activateFunc,
                deactivate: deactivateFunc,
                xMax: 303
            });

            var handlerIn = function(e)
            {
                var jqThis = $(this),
                    jqSub = jqThis.find(".subContainer:first, .subPane:first");
                jqThis.addClass("hover");
                $(".globalNav ul > li > .subContainer").hide();
                jqSub.show();
                $(".headerOverlay").show();

                if (jqThis.is('.logo'))
                {
                    hideHeaderOverlay();
                }

                if (deferInitClassRemoval)
                {
                    removeInitClassFromHeader();
                    deferInitClassRemoval = false;
                }

                //check if search auto suggest is open and if it is close it
                var searchAutoSuggest = $("div.searchSuggest");
                if (searchAutoSuggest.length)
                {
                    searchAutoSuggest.remove();
                }
            }

            function handlerOut(e)
            {
                var jqThis = $(this),
                    jqSub = jqThis.find(".subContainer:first");
                jqThis.removeClass("hover");
            }

            $(globalNavItems).hoverIntent({
                over: handlerIn,
                out: handlerOut,
                timeout: 100
            });

            var overlayTimeout;

            function hideHeaderOverlay()
            {
                $(".headerOverlay").hide();
            }

            $(".globalInnerLeft").hover(
                function()
                {
                    clearTimeout(overlayTimeout);
                }, function()
                {
                    overlayTimeout = setTimeout(hideHeaderOverlay, 100);
                }
            );

            $(".globalInnerLeft").on("mouseleave", function()
            {
                $(".subContainer").hide();
                hideHeaderOverlay();
            });

            $("#userDropdownMenu > ul").find("> li.closed, > li.open").find("> a").click(function(ev)
            {
                $(this).parent().toggleClass("closed").toggleClass("open");
                ev.preventDefault();
                return false;
            });

            $('#dealStats:not(.expiredDeal):not([data-nosticky])').scrollToFixed({
                marginTop: 64,
                zIndex: 100,
                dontSetWidth: true
            });

            $("body").on("click", (function()
            {
                var cachedElements;
                return function(e)
                {
                    if (!cachedElements)
                    {
                        cachedElements = {
                            jqSearchDrop: $("div.searchDropdown"),
                            jqUpAndDown: $(".globalSearch .icon-arrow-down, .globalSearch  .icon-arrow-up")
                        };
                    }

                    closeSearchDropdown(cachedElements, e.target);
                };
            }()));

            function closeSearchDropdown(cached, target)
            {
                if (cached.jqSearchDrop.length && (!($.contains(cached.jqSearchDrop[0], target)) || cached.jqSearchDrop.is(target)) && !cached.jqUpAndDown.is(target))
                {
                    cached.jqSearchDrop.hide();

                    $(".globalSearch .icon-arrow-down").show();
                    $(".globalSearch .icon-arrow-up").hide();
                }
            }

            $(".globalSearch .icon-arrow-down").click(function(e)
            {
                $(".searchDropdown").toggle();
                $(".globalSearch .icon-arrow-down").toggle();
                $(".globalSearch .icon-arrow-up").toggle();
                e.preventDefault();
            });

            $(".globalSearch .icon-arrow-up").click(function(e)
            {
                $(".searchDropdown").hide();
                $(".globalSearch .icon-arrow-down").show();
                $(this).hide();
                e.preventDefault();
            });

            $(".globalSearch input.searchBox").focus(function()
            {
                $(this).parent().addClass("globalSearchFocus");
            }).blur(function()
            {
                $(this).parent().removeClass("globalSearchFocus");
            });

            function removeInitClassFromHeader()
            {
                $('#globalBar').removeClass('uninitialized');
            }

            // handle someone interacting with header before full header was initialized so it doesn't disappear
            if ($(globalNavItems + ':hover').length > 0)
            {
                deferInitClassRemoval = true;
            }
            else
            {
                removeInitClassFromHeader();
            }
        });

    // Replacing SDXT crud
        if (typeof __linkCap == "undefined")
        {
            __linkCap = new Date();
            __linkCap.setTime(new Date().getTime() + 31449600000);

            $(document).on('mousedown', 'a[data-link]', function(e)
            {
                if (typeof $ != 'undefined' && 'cookie' in $)
                {
                    $.cookie('sdxt', window.location.pathname + ':' + $(this).data('link'), {
                        expires: 364,
                        path: '/'
                    });
                }
                else
                {
                    document.cookie = 'sdxt=' + window.location.pathname + ':' + $(this).data('link') + '; expires=' + __linkCap.toUTCString() + '; path=/';
                }
            });

            if (typeof $ != 'undefined' && 'removeCookie' in $)
            {
                $.removeCookie('sdxt');
            }
            else
            {
                document.cookie = 'sdxt=""; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/';
            }
        }

    });

    if (typeof define !== 'function' || (define && !define.amd))
    {
        $(document).ready(function() {
            // Only lazy loading this way when this file isn't being shimmed
            var $criticalImages = $('img[data-lazy-img="critical"]');

            if ($criticalImages.length)
            {
                window.sdLoadQueue.push([function() {
                    $criticalImages.lazyload({
                        'effect': 'show',
                        'event': 'sporty',
                        'skip_invisible': false
                    }).trigger("sporty");
                }, 'criticalPath'])
            }

            var $nonCriticalImages = $('img[data-lazy-img="nonCritical"], .lazyimg');

            if ($nonCriticalImages.length)
            {
                window.sdLoadQueue.push([function() {
                    $nonCriticalImages.show().lazyload({
                        'effect': 'show',
                        'event': 'sporty',
                        'skip_invisible': false
                    }).trigger("sporty");
                }, 'nonCriticalUi']);
            }
        });
    }
})(window);

;window.sdfollowers          = {}; // global namespace for slickdeals js followers

$(function () {
    if($('.checkall'))
    {
        $('.checkall').click(function () {
            $('#ffform').find(':checkbox').attr('checked', this.checked);
        });
    }

    if($('.fb-logout-button'))
    {
        $('.fb-logout-button').click(function () {
            FB.logout(function(response) {
            });
        });
    }
});

window.forum_id = 0;
$(document).ready(function () {
    if($("select.forum_multiselect").length)
    {
        $("select.forum_multiselect").multiselect({
            noneSelectedText: "Select Forums",
            selectedList: 100,
            minWidth: 300,
            classes: "sel_multi_forums"
        });
    }

    if($("select.notify_multiselect").length)
    {
        $("select.notify_multiselect").multiselect({
            noneSelectedText: "Select Notification Methods",
            selectedList: 3,
            minWidth: 300,
            classes: "sel_multi_notify"
        });
    }

    if($('#btn_remove').length)
    {
        $('#btn_remove').click(function(){
            genericdialog("Unfollow Users", "Are you sure you want to unfollow the selected users?", false,
            function(){
                $('#subtask').val('remove');
                $('#frm_follow').submit();
            },
            function(){

            });
        });
    }

    if($('#btn_remove_recommended').length)
    {
        $('#btn_remove_recommended').click(function(){
            genericdialog("Remove Users", "Are you sure you want to remove the selected users?", false,
            function(){
                $('#rec_subtask').val('remove');
                $('#frm_rec_follow').submit();
            },
            function(){

            });
        });
    }

    if($('#btn_more').length)
    {
        $('#btn_more').click(function(e){
             e.preventDefault();
             $('#frm_rec_follow .usercp_table tr.overflow').removeClass('hide');
             $('#span_more').hide();
             $('#span_less').show();
        });
    }

    if($('#btn_less').length)
    {
        $('#btn_less').click(function(e){
             e.preventDefault();
             $('#frm_rec_follow .usercp_table tr.overflow').addClass('hide');
             $('#span_less').hide();
             $('#span_more').show();
        });
    }

    $("#firstpost-user-dropdown").on("click", "a.btn_follow", followUserAction);

    $("#firstpost-user-dropdown").on("click", "a.btn_follow", function() {
        $("#firstpost-user-dropdown").hide();
    });

    $("#aboutOP_dropdownmenu").on("click", "a.btn_follow", followUserAction);

    $("#aboutOP_dropdownmenu").on("click", "a.btn_follow", function() {
        $("#aboutOP_dropdownmenu").hide();
    });

    if ($('#posts').length)
    {
        // $('#posts a.btn_follow').click(function(e){
        $("#posts").on("click", "a.btn_follow", followUserAction);
    }

    if($('#pause_until_date').length)
    {
        $( "#pause_until_date" ).datepicker({
            dateFormat: 'yy-mm-dd',
            minDate: new Date()
        });
    }

    $('#pause_until_date').click(function(e){
        e.preventDefault();
    });

    if($('#pause_following_notifications').length)
    {
        $('#pause_following_notifications').click(function(){
            $('#following_pause_until').toggleClass('hide');
        });
    }

    $('#follow_chk_all_rec').click(function(e){
        e.preventDefault();
        $('#recommended_follow table.usercp_table.follow_table tr td input[type="checkbox"]').attr('checked', true);
    });

    $('#follow_unchk_all_rec').click(function(e){
        e.preventDefault();
        $('#recommended_follow table.usercp_table.follow_table tr td input[type="checkbox"]').attr('checked', false);
    });

    $('#follow_chk_all').click(function(e){
        e.preventDefault();
        $('#frm_follow table.usercp_table.follow_table tr td input[type="checkbox"]').attr('checked', true);
    });

    $('#follow_unchk_all').click(function(e){
        e.preventDefault();
        $('#frm_follow table.usercp_table.follow_table tr td input[type="checkbox"]').attr('checked', false);
    });
});

sdfollowers.getMoreRecommendedFriends = function()
{
    $.ajax({
        url: '/ajax/following.php',
        cache: false,
        data: {
            'do': 'initFollowingPopup',
            'securitytoken' : SECURITYTOKEN
        },
        dataType: 'json',
        type: 'POST',
        success: function(data){
            sdfollowers.RecommendedFriendsDialog(data);
        }
    });
};

sdfollowers.RecommendedFriendsDialog = function(data)
{
    if (typeof data !== "object")
    {
        data = $.parseJSON(data);
    }

    if (typeof data == "object" && data.success == true && typeof data.form != "undefined")
    {
        $('#loginbox_overlay').remove();
        html = '';
        var output = '<div id="dialog_newuserfollowpopup" title="Recommended Users to Follow on Slickdeals" style="display:none;">'+data.form+'</div>';
        $('body').append(output);
        $('#dialog_newuserfollowpopup').dialog
        ({
            autoOpen:true,
            height:"auto",
            width: "570px",
            modal:true,
            resizable:false,
            draggable:false,
            zIndex: 21001,
            position: "top",
            buttons: {
                "Continue": function() {
                    if (data.goto)
                    {
                        location.href = data.goto;
                    }
                    else
                    {
                        location.reload(true);
                    }
                }
            },
            close: function() {
                if (data.goto)
                {
                    location.href = data.goto;
                }
                else
                {
                    location.reload(true);
                }
            }
        });

        $('.ui-widget-overlay').click(function(elem){
            if($(elem.target).attr('class') == 'ui-widget-overlay')
            {
                if (data.goto)
                {
                    location.href = data.goto;
                }
                else
                {
                    location.reload(true);
                }
            }
        });

        $('.usercp_table.follow_table tr td.checkbox a.btn_follow').click(function(e){
            e.preventDefault();
            var userid = $(this).attr('userid');
            var href = $(this).data('url');
            var id = $(this).attr('id');
            var new_val;
            $.ajax({
                url: href,
                type: 'POST',
                data: {
                    'securitytoken': SECURITYTOKEN
                }
            });

            if(href.indexOf('do=unfollowuser') > 0)
            {
                href = href.replace('do=unfollowuser', 'do=followuser');
                $(this).data('url', href);
                $(this).html('Follow');
                $(this).addClass('btn_blue').removeClass('btn_grey');

                if($('.user_'+userid+'_followcount').length)
                {
                    new_val = ($('.user_'+userid+'_followcount').html() - 0) - 1;
                    $('.user_'+userid+'_followcount').html(new_val);
                }
            }
            else if(href.indexOf('do=followuser') > 0)
            {
                href = href.replace('do=followuser', 'do=unfollowuser');
                $(this).data('url', href);
                $(this).html('Unfollow');
                $(this).addClass('btn_grey').removeClass('btn_blue');

                if($('.user_'+userid+'_followcount').length)
                {
                    new_val = ($('.user_'+userid+'_followcount').html() - 0) + 1;
                    $('.user_'+userid+'_followcount').html(new_val);
                }
            }
        });
    }
    else
    {
        location.reload(true);
    }
};

function followUserAction (e){
    e.preventDefault();
    var elem = $(this);
    var href = "/ajax/following.php";
    var data = {};
    if (elem.data('action'))
    {
        data = {
            'u':  elem.data('userid'),
            'do': elem.data('action'),
            'f':  elem.data('forumid'),
            'ajax': 1
        };
    }
    else if (elem.data('url'))
    {
        href = elem.data('url');
    }
    else
    {
        href = elem.attr('href');
    }

    data.securitytoken = SECURITYTOKEN;

    $.ajax({
        url: href,
        type: 'POST',
        data: data
    }).done(function(html) {
        if ($(html).find('dologin').length > 0)
        {
            sd_ajax_login({action_source: 'Follow User'});
            return;
        }
        var userid = 0;
        var forum_id = 0;
        var action = '';
        if (elem.data('action'))
        {
            userid   = elem.data('userid');
            forum_id = elem.data('forumid');
            action   = elem.data('action');
        }
        else
        {
            if (!href)
            {
                href = elem.data('url');

                if (!href)
                {
                    href = elem.attr('href');
                }
            }
            href = href.replace("/ajax/following.php?", "");
            var params = href.split('&');
            for (var i in params)
            {
                var val = params[i].split('=');
                if (val[0] == 'u')
                {
                    userid = val[1];
                }
                if (val[0] == 'f')
                {
                    forum_id = val[1];
                }
                if (val[0] == 'do')
                {
                    action = val[1];
                }
            }
        }

        if (action == 'unfollowuser')
        {
            if (elem.data('action'))
            {
                $(".btn_follow[data-userid='"+userid+"']")
                    .data('action', 'followuser')
                    .find(".icon-user-delete6")
                    .toggleClass("icon-user-delete6 icon-user-add6")[0]
                    .nextSibling.nodeValue = 'Follow User';
            }
            else
            {
                elem = $('a.btn_follow_'+userid+':first');
                href = "/ajax/following.php?" + href;
                href = href.replace('do=unfollowuser', 'do=followuser');
                $("a.btn_follow_"+userid).each(function () {
                    $(this).data('url', href).html('+ Follow');
                });
            }

            if ($('.user_'+userid+'_followcount').length)
            {
                var new_val = ($('.user_'+userid+'_followcount').html() - 0) - 1;
                $('.user_'+userid+'_followcount').html(new_val);
            }
        }
        else if (action == 'followuser')
        {
            //show popup to select options
            if (html != '')
            {
                var output = '<div id="dialog_followoptions" title="Settings for Following User" style="display:none;">'+html+'</div>';
                $('body').append(output);
                $('#dialog_followoptions').dialog
                ({
                    autoOpen:true,
                    height:"auto",
                    width: "486px",
                    modal:true,
                    resizable:false,
                    draggable:false,
                    zIndex: 21001,
                    buttons: {
                        "Save": function(event) {
                            var follow_user_id = $('#dialog_followoptions #follow_user_id').val();

                            var chk_follow = {};
                            chk_follow[follow_user_id] = 'on';

                            var sel_forum_ids = {};
                            sel_forum_ids[follow_user_id] = $('select.forum_multiselect').val();

                            var sel_notify_methods = {};
                            sel_notify_methods[follow_user_id] = $('select.notify_multiselect').val();

                            $('.err_forums').hide();
                            $('.err_notify').hide();

                            var error = false;
                            if(sel_forum_ids[follow_user_id] == null)
                            {
                                $('.err_forums').show();
                                error = true;
                            }
                            if(sel_notify_methods[follow_user_id] == null)
                            {
                                $('.err_notify').show();
                                error = true;
                            }

                            if ($("select.notify_multiselect").data("emailoff") && $.inArray("1", sel_notify_methods[follow_user_id]) != -1 && typeof emConfirmModal == "function")
                            {
                                var thisEvent = event;

                                emConfirmModal({
                                    type: 'followed_users',
                                    name: "Followed User",
                                    text: "You have Followed User emails turned off. If you'd like to follow this user and receive these emails please confirm by clicking the button below.",
                                    containerCss: {
                                        "width": "577px"
                                    },
                                    zIndex: 23000,
                                    onSuccess: function()
                                    {
                                        $("select.notify_multiselect").data("emailoff", 0);
                                        $(thisEvent.currentTarget).trigger("click");
                                    }
                                });

                                error = true;
                            }

                            if(error != true)
                            {
                                $.ajax({
                                   url: '/ajax/following.php',
                                   type: 'POST',
                                   dataType: 'json',
                                   data: {
                                       'securitytoken': SECURITYTOKEN,
                                       'chk_follow': chk_follow,
                                       'sel_forum_ids': sel_forum_ids,
                                       'sel_notify_methods': sel_notify_methods,
                                       'u': follow_user_id
                                   },
                                   success: function(data)
                                   {
                                        if(data === null)
                                        {
                                            $('#dialog_followoptions').dialog("close");
                                            if (elem.data('action'))
                                            {
                                                $(".btn_follow[data-userid='"+follow_user_id+"']")
                                                    .data('action', 'unfollowuser')
                                                    .find(".icon-user-add6")
                                                    .toggleClass("icon-user-add6 icon-user-delete6")[0]
                                                    .nextSibling.nodeValue = 'Unfollow User';
                                            }
                                            else
                                            {
                                                elem = $('a.btn_follow_'+follow_user_id+':first');
                                                var href = elem.data('url');
                                                href = href.replace('do=followuser', 'do=unfollowuser');
                                                $("a.btn_follow_"+follow_user_id).each(function () {
                                                    $(this).data('url', href).html('- Unfollow');
                                                });
                                            }

                                            if ($('.user_'+follow_user_id+'_followcount').length)
                                            {
                                                var new_val = ($('.user_'+follow_user_id+'_followcount').html() - 0) + 1;
                                                $('.user_'+follow_user_id+'_followcount').html(new_val);
                                            }
                                        }
                                        else if(data != null && typeof(data) == "object" && data.success && data.success == false)
                                        {
                                            var errors = data.errors;
                                            if(data.errors.no_forum)
                                            {
                                                $('.err_forums').show();
                                            }
                                            if(data.errors.no_notifymethod)
                                            {
                                                $('.err_notify').show();
                                            }
                                        }
                                   }

                                });
                            }
                        },
                        "Cancel": function() {
                            $(this).dialog("close");
                        }
                    },
                    close: function() {
                        $('#dialog_followoptions').remove();
                    }
                });

                $("select.forum_multiselect").multiselect({
                    noneSelectedText: "Select Forums",
                    selectedList: 100,
                    minWidth: 300,
                    classes: "sel_multi_forums",
                    click: function(event, ui)
                    {
                        var checked = $(this).multiselect("getChecked");
                        if(checked.length == 0)
                        {
                            $('.err_forums').show();
                        }
                        else
                        {
                            $('.err_forums').hide();
                        }
                    },
                    uncheckAll: function()
                    {
                        $('.err_forums').show();
                    }
                });

                $("select.notify_multiselect").multiselect({
                    //header: "Select Notify Methods",
                    noneSelectedText: "Select Notification Methods",
                    selectedList: 3,
                    minWidth: 300,
                    classes: "sel_multi_notify",
                    click: function(event, ui)
                    {
                        var checked = $(this).multiselect("getChecked");
                        if(checked.length == 0)
                        {
                            $('.err_notify').show();
                        }
                        else
                        {
                            $('.err_notify').hide();
                        }
                    },
                    uncheckAll: function()
                    {
                        $('.err_notify').show();
                    }
                });

                $("div.ui-multiselect-menu.sel_multi_forums").css('z-index', 60000);
                $("div.ui-multiselect-menu.sel_multi_notify").css('z-index', 60000);

                //hook onto checkbox click
                $('.usercp_table.follow_table tr td input[type="checkbox"]').click(function(){
                    var userid = $(this).attr('userid');
                    var href = '/forums/profile.php';
                    var action;

                    if($(this).is(':checked'))
                    {
                        action = 'followuser';
                    }
                    else
                    {
                        action = 'unfollowuser';
                    }
                    $.ajax({
                        url: href,
                        type: 'POST',
                        data: {
                            'do': action,
                            'u': userid,
                            'securitytoken': SECURITYTOKEN
                        }
                    });
                });

                $('.usercp_table.follow_table tr td.checkbox a.btn_follow').click(function(e){
                    e.preventDefault();
                    var userid = $(this).attr('userid');
                    var href = $(this).data('url');
                    var id = $(this).attr('id');
                    var new_val;

                    if (href.indexOf('do=followuser') > 0 && $("select.notify_multiselect").data("emailNotification") && typeof emConfirmModal == "function")
                    {
                        var thisVar = this;
                        emConfirmModal({
                            type: 'followed_users',
                            name: "Followed Users",
                            text: "You have Followed User emails turned off. If you'd like to follow this user and receive these emails please confirm by clicking the button below.",
                            onSuccess: function()
                            {
                                $("select.notify_multiselect").data("emailNotification", 0);
                                $(thisVar).trigger("click");
                            },
                            zIndex: 23000
                        });
                    }
                    else
                    {
                        $.ajax({
                            url: href,
                            type: 'POST',
                            data: {
                                'securitytoken': SECURITYTOKEN
                            }
                        });

                        if (href.indexOf('do=unfollowuser') > 0)
                        {
                            href = href.replace('do=unfollowuser', 'do=followuser');
                            $(this).data('url', href);
                            $(this).html('Follow');
                            $(this).addClass('btn_blue').removeClass('btn_grey');

                            if ($('.user_' + userid + '_followcount').length)
                            {
                                new_val = ($('.user_' + userid + '_followcount').html() - 0) - 1;
                                $('.user_' + userid + '_followcount').html(new_val);
                            }
                        }
                        else if (href.indexOf('do=followuser') > 0)
                        {
                            href = href.replace('do=followuser', 'do=unfollowuser');
                            $(this).data('url', href);
                            $(this).html('Unfollow');
                            $(this).addClass('btn_grey').removeClass('btn_blue');

                            if ($('.user_' + userid + '_followcount').length)
                            {
                                new_val = ($('.user_' + userid + '_followcount').html() - 0) + 1;
                                $('.user_' + userid + '_followcount').html(new_val);
                            }
                        }
                    }
                });
                var recommended_loaded = false;
                $('#rec_follow_hide').click(function(e){
                    e.preventDefault();
                    $('#popup_recommended_follow').hide();
                    $('#rec_follow_hide').hide();
                    $('#rec_follow_show').show();
                    $('#dialog_followoptions').dialog( 'option', 'position', 'center' );
                });
                $('#rec_follow_show').click(function(e){
                    e.preventDefault();
                    //var forum_id = 0;
                    if(recommended_loaded == false)
                    {
                        $('#popup_recommended_follow_toggle .ajax_loader').html('<img src="/images/slickdeals/ajaxsmall.gif" />');

                        $('#rec_follow_show').block({
                            message: null,
                            overlayCSS:  {
                                backgroundColor: '',
                                opacity: 'inherit',
                                timeout: 5000
                            }
                        });
                        $.ajax({
                           url: '/ajax/following.php',
                           type: 'POST',
                           dataType: 'json',
                           data: {
                               'securitytoken': SECURITYTOKEN,
                               'do': 'getRecommendedUsers',
                               'f': forum_id
                           },
                           success: function(data)
                           {
                               var new_val;
                               if(data)
                               {
                                   $('#popup_recommended_follow_toggle .ajax_loader').html('');
                                   $('#rec_follow_show').unblock();
                                   if(data.success)
                                   {
                                        $('#popup_recommended_follow').html(data.html);
                                        $('#popup_recommended_follow').show();
                                        $('#rec_follow_show').hide();
                                        $('#rec_follow_hide').show();
                                        $('#dialog_followoptions').dialog( 'option', 'position', 'center' );
                                        recommended_loaded = true;

                                        $('.usercp_table.follow_table tr td.checkbox a.btn_follow').click(function(e){
                                            e.preventDefault();
                                            var userid = $(this).attr('userid');
                                            var href = $(this).data('url');
                                            var id = $(this).attr('id');

                                            if (href.indexOf('do=followuser') > 0 && $("select.notify_multiselect").data("emailNotification") && typeof emConfirmModal == "function")
                                            {
                                                var thisVar = this;
                                                emConfirmModal({
                                                    type: 'followed_users',
                                                    name: "Followed Users",
                                                    text: "You have Followed User emails turned off. If you'd like to follow this user and receive these emails please confirm by clicking the button below.",
                                                    onSuccess: function()
                                                    {
                                                        $("select.notify_multiselect").data("emailNotification", 0);
                                                        $(thisVar).trigger("click");
                                                    },
                                                    zIndex: 23000
                                                });
                                            }
                                            else
                                            {
                                                $.ajax({
                                                    url: href,
                                                    type: 'POST',
                                                    data: {
                                                        'securitytoken': SECURITYTOKEN
                                                    }
                                                });

                                                if (href.indexOf('do=unfollowuser') > 0)
                                                {
                                                    href = href.replace('do=unfollowuser', 'do=followuser');
                                                    $(this).data('url', href);
                                                    $(this).html('Follow');
                                                    $(this).addClass('btn_blue').removeClass('btn_grey');

                                                    if ($('.user_' + userid + '_followcount').length)
                                                    {
                                                        new_val = ($('.user_' + userid + '_followcount').html() - 0) - 1;
                                                        $('.user_' + userid + '_followcount').html(new_val);
                                                    }
                                                }
                                                else if (href.indexOf('do=followuser') > 0)
                                                {
                                                    href = href.replace('do=followuser', 'do=unfollowuser');
                                                    $(this).data('url', href);
                                                    $(this).html('Unfollow');
                                                    $(this).addClass('btn_grey').removeClass('btn_blue');

                                                    if ($('.user_' + userid + '_followcount').length)
                                                    {
                                                        new_val = ($('.user_' + userid + '_followcount').html() - 0) + 1;
                                                        $('.user_' + userid + '_followcount').html(new_val);
                                                    }
                                                }
                                            }
                                        });
                                   }
                               }
                               else
                               {
                                   $('#popup_recommended_follow_toggle .ajax_loader').html('');
                                   $('#rec_follow_show').unblock();
                                   $('#popup_recommended_follow').html('Currently, you have no recommended users to follow.');
                                   $('#popup_recommended_follow').show();
                                   $('#rec_follow_show').hide();
                                   $('#rec_follow_hide').show();
                               }
                           }
                        });
                    }
                    else
                    {
                        $('#popup_recommended_follow').show();
                        $('#rec_follow_show').hide();
                        $('#rec_follow_hide').show();
                        $('#dialog_followoptions').dialog( 'option', 'position', 'center' );
                    }
                });
            }
        }
        if (href.indexOf("/ajax/following.php") == -1)
        {
            href = "/ajax/following.php?" + href;
        }
        elem.data('url', href);
    });
}
;if (typeof DISPLAY_NOJS == "undefined")
{
    window.isModal = /modal=[^0.]/.test(window.location.search);

    // Variables we use throughout the application
    window.FACEBOOK_OFF = false;

    window.sdfacebook = window.sdfacebook || {}; // global namespace for slickdeals js facebook
    sdfacebook.read_permissions = ['email'];
    sdfacebook.write_permissions = [];
    sdfacebook.permissions = sdfacebook.read_permissions.concat(sdfacebook.write_permissions);
    sdfacebook.profile = {};
    sdfacebook.fb_message = "";

    // We set this in the code of the header via the users options from the database
    sdfacebook.fb_options = sdfacebook.fb_options || 0;

    sdfacebook.EVERYTHING_OFF = 4026531840;

    // comma separated list of fields we want to pull from the facebook users profile
    sdfacebook.profile_fields = "first_name,last_name,birthday,gender,email,location";

    // boolean flag sets true when user is logged in on slickdeals
    sdfacebook.SDLoggedIn = sdfacebook.SDLoggedIn || false;
    sdfacebook.AccessToken = "";
    sdfacebook.usingDefaultOptions = false;

    sdfacebook.complete_signup = false;
    sdfacebook.chosen_username = '';
    sdfacebook.newsletter = 0;
    sdfacebook.need_permission_rerequest = false;
    sdfacebook.actionSource = null;
    sdfacebook.regUrl = '';
    sdfacebook.autoReg = false;
    sdfacebook.forceUsername = true;
    sdfacebook.sdkLoaded = false;
    sdfacebook.registrationTracking = {};

    // Init the SDK upon load
    window.fbAsyncInit = function()
    {
        if (typeof FB != "undefined")
        {
            FB.init({
                appId      : facebook_appid, // Production appid
                status     : true, // check login status
                cookie     : true, // enable cookies to allow the server to access the session
                xfbml      : false,// parse XFBML
                version    : 'v6.0'
            });

            // listen for and handle auth.statusChange events
            FB.Event.subscribe('auth.statusChange', sdfacebook.FacebookInit);

            sdfacebook.sdkLoaded = true;

            $(document).ready(function ()
            {
                sdfacebook.initializeFacebookElements();
            });
        }
        else
        {
            FACEBOOK_OFF = true;
        }

        $(document).on('click', '[data-role="facebookSignUp"]', sdfacebook.signUpClickHandler);
    };

    sdfacebook.isExtension = function()
    {
        return window.dataLayer.visitor.layout === 'Extension';
    }

    sdfacebook.getWindowParent = function ()
    {
        return sdfacebook.isExtension() ? window : window.parent;
    };

    sdfacebook.signUpClickHandler = function (event)
    {
        var $elm = $(event.currentTarget);
        var loginOptions = $elm.data('login-options') || {};

        sdfacebook.trackAttempt(loginOptions.regLogForm);

        sdfacebook.SingleSignon($elm.data('login-options'));
    };

    sdfacebook.trackAttempt = function (regLogForm)
    {
        if (window.SD && window.SD.RegLog && regLogForm)
        {
            sdfacebook.registrationTracking = window.SD.RegLog.socialAttempt(regLogForm, 'facebook');
        }
    };

    sdfacebook.getSDKLoadPriority = function ()
    {
        var criticalPathLocations = [
            '/forums/register.php',
            '/forums/login.php'
        ];

        return criticalPathLocations.indexOf(window.location.pathname) > -1 ? 'criticalPath' : 'nonCriticalUi';
    };

    $(document).ready(function () {
        // Load the SDK Asynchronously
        window.sdLoadQueue.push([function() {
            (function(d){
                var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
                if (d.getElementById(id))
                {
                    return;
                }
                js = d.createElement('script');
                js.id = id;
                js.async = true;
                js.src = "//connect.facebook.net/en_US/sdk.js";
                ref.parentNode.insertBefore(js, ref);
            }(document));
        }, sdfacebook.getSDKLoadPriority()]);

        if (sdfacebook.fb_options == sdfacebook.EVERYTHING_OFF)
        {
            FACEBOOK_OFF = true;
        }

        // Click the link facebook button from account settings page
        $("#link_facebook").click(function (e) {
            sdfacebook.FacebookLogin(function () {
                location.reload();
            }, true);
            e.preventDefault();
            return false;
        });

        // creates div for facebook dialog
        if ($("#sdfacebook_options_dialog").length == 0)
        {
            $('body').append("<div id='sdfacebook_options_dialog'></div>");
        }

        if (isModal)
        {
            $('#linkaccount_facebook form').submit(sdfacebook.handleDoLinkSubmit);
            $('#choose_username_facebook').submit(sdfacebook.handleChooseUsernameSubmit);
        }
    });

    sdfacebook.initializeFacebookElements = function()
    {
        $('[data-role="facebookSignUp"]').prop('disabled', false);

        sdfacebook.xfbmlParse();
    };

    sdfacebook.xfbmlParse = function ()
    {
        var fbElements = [
            '#fbLike',
            'div[data-facebook-sign-up-container]'
        ];

        fbElements.forEach(function (selector)
        {
            $(selector).each(function (idx, elm)
            {
                FB.XFBML.parse(elm);
            });
        });
    };

    sdfacebook.CollapseDialogOptions = function()
    {
        $('#fbchangeLink').text("Don't Ask Me Again");

        $('#fbchangeLink').unbind('click');
        $('#fbchangeLink').click(function()
        {
            sdfacebook.ExpandDialogOptions();
        });

        $('.fbPreviewContainer.activity').removeClass("hide");
        $('.fbPreviewContainer.settings').addClass('hide');
    };

    // This will remove the app from the users permissions
    sdfacebook.DeleteApp = function(access_token)
    {
        FB.api('/me/permissions', 'delete', {
            access_token: access_token
        });
    };

    sdfacebook.DialogDefaultRenderCheck = function()
    {
        if (sdfacebook.usingDefaultOptions == true)
        {
            $('#optionChange').val('1');
            $('input[name="optionChange"]').val('1');
        }
    };

    sdfacebook.ExpandDialogOptions = function()
    {
        $('#fbchangeLink').text("Save Settings");

        $('#fbchangeLink').unbind('click');
        $('#fbchangeLink').click(function()
        {
            sdfacebook.CollapseDialogOptions();
        });

        $('.fbPreviewContainer.activity').addClass("hide");
        $('.fbPreviewContainer.settings').removeClass('hide');
    };

    // Runs every time the page loads if user is logged into facebook, so be careful what goes in here
    sdfacebook.FacebookInit = function(response)
    {
        if (response.status != "not_authorized" && response.status != "unknown")
        {
            // They click unlink from account settings
            $("#unlinkFacebook").click(function(e){
                e.preventDefault();
                if (sdfacebook.UnlinkFacebook(response.authResponse.accessToken))
                {
                    location.reload();
                }
            });

            sdfacebook.AccessToken = response.authResponse.accessToken;
            sdfacebook.FacebookId  = response.authResponse.userID;
        }
    };

    sdfacebook.CheckPassword = function(r, callback){
        var passwordModal = new PasswordModal({
            headline: 'Please enter your password',
            message: 'This action requires you to enter your Slickdeals password.',
            onSubmit: function(password){
                var settings = {
                    type: 'post',
                    data: {
                        do: 'check_password',
                        securitytoken: SECURITYTOKEN,
                        password: password
                    },
                    url: '/ajax/profile_ajax.php',
                    dataType: 'json'
                };

                $.ajax(settings).done(function(response){
                    passwordModal.close();

                    if (response.error)
                    {
                        new ErrorModal(response.error);
                    }
                    else
                    {
                        if (typeof FB != "undefined")
                        {
                            FB.api('/me?fields=' + sdfacebook.profile_fields, function(profile){
                                // don't do this if they're not logged into slickdeals
                                sdfacebook.UpdateFacebookId(r.authResponse.userID, r.authResponse.accessToken, profile, callback);
                            });
                        }
                    }
                });
            }
        });
    };

    sdfacebook.CheckPasswordClassic = function(r, callback)
    {
        var html = 'This action requires you to enter your Slickdeals.net password.<br />' +
                '<input type="password" name="password" id="link_facebook_password" />';

        var okfunc = function()
        {
            var password = $("#link_facebook_password").val();
            $.post("/ajax/profile_ajax.php",
                {
                    "do" : "check_password",
                    'securitytoken': SECURITYTOKEN,
                    'password' : password
                },
                function(data)
                {
                    if (data.error)
                    {
                        var errorokfunc = function()
                        {
                            if (typeof callback == "function")
                            {
                                callback();
                            }
                        };

                        genericdialog("Error", data.error, null, errorokfunc);
                    }
                    else
                    {
                        if (typeof FB != "undefined")
                        {
                            FB.api('/me?fields=' + sdfacebook.profile_fields, function(profile)
                            {
                                // don't do this if they're not logged into slickdeals
                                sdfacebook.UpdateFacebookId(r.authResponse.userID, r.authResponse.accessToken, profile, callback);
                            });
                        }
                    }
                },
                "json"
            );
        };

        genericdialog("Please enter your password", html, null, okfunc);
        $("#link_facebook_password").focus().keypress(function(e){
            if (e.keyCode == 13)
            {
                $(e.target).closest(".ui-dialog").find(".ui-dialog-buttonpane button").click();
            }
        });
    };

    sdfacebook.checkHasGrantedAllLoginPermissions = function(successCallback, failCallback){
        FB.api('/me/permissions?fields=permission,status', function(response){
            if (!sdfacebook.hasGrantedAllLoginPermissions(response))
            {
                return failCallback();
            }
            else
            {
                return successCallback();
            }
        });
    };

    sdfacebook.hasGrantedAllLoginPermissions = function(response) {
        if (typeof response !== 'object' || !response.hasOwnProperty('data') || !$.isArray(response.data))
        {
            return false;
        }

        for (var i in response.data)
        {
            if (!isNaN(parseInt(i)))
            {
                var permission = response.data[i];
                if (!permission.hasOwnProperty('status') || permission.status !== 'granted')
                {
                    // permission hasn't been granted
                    return false;
                }
            }
        }

        return true;
    };

    sdfacebook.FacebookLoginCallback = function(r, callback, nosave)
    {
        // if error, user canceled or closed window
        if (!r.authResponse)
        {
            return false;
        }

        var handleUserHasGrantedLoginPermissions = function(){
            sdfacebook.handleUserHasGrantedLoginPermissions(r, callback, nosave)
        };

        sdfacebook.checkHasGrantedAllLoginPermissions(
            handleUserHasGrantedLoginPermissions,
            sdfacebook.handleUserHasNotGrantedAllLoginPermissions
        );
        return true;
    };

    sdfacebook.handleUserHasGrantedLoginPermissions = function(r, callback, nosave) {
        if (sdfacebook.SDLoggedIn)
        {
            if (nosave)
            {
                if (window.dataLayer.visitor.layout == 'Classic')
                {
                    sdfacebook.CheckPasswordClassic(r, callback);
                }
                else
                {
                    sdfacebook.CheckPassword(r, callback);
                }
            }
            else if (typeof FB != "undefined")
            {
                FB.api('/me?fields=' + sdfacebook.profile_fields, function(profile)
                {
                    sdfacebook.UpdateFacebookId(r.authResponse.userID, r.authResponse.accessToken, profile, callback);
                });
            }
        }
        else if (typeof callback === "function")
        {
            callback();
            return true;
        }
        return false;
    };

    sdfacebook.handleUserHasNotGrantedAllLoginPermissions = function() {
        sdfacebook.need_permission_rerequest = true;
        window.parent.errordialog('You must grant all Facebook permissions to login with Facebook. Please login again and accept those permissions to login with Facebook');
        return false;
    };

    sdfacebook.FacebookLogin = function(callback, nosave, write_perms)
    {
        var request_permissions = [];
        request_permissions.push(sdfacebook.read_permissions);

        if (write_perms)
        {
            request_permissions.push(sdfacebook.write_permissions);
        }

        var params = {
            scope: request_permissions.join(",")
        };

        if (sdfacebook.need_permission_rerequest)
        {
            params.auth_type = 'rerequest';
        }

        if (typeof FB != "undefined")
        {
            // logs them in, and fetches permissions
            FB.login(function(r) {
                sdfacebook.FacebookLoginCallback(r, callback, nosave);
            }, params);
        }
    };

    sdfacebook.SaveOptions = function(options, callback)
    {
        if (options != sdfacebook.fb_options)
        {
            $.post("/ajax/profile_ajax.php",
                {
                    "do"            : "update_fb_options",
                    "securitytoken" : SECURITYTOKEN,
                    "fb_options"    : options
                },
                function(data)
                {
                    if (data.success)
                    {
                        sdfacebook.fb_options = options;
                    }

                    if (typeof callback == "function")
                    {
                        callback();
                    }
                },
                "json"
            );
        }
        else
        {
            if (typeof callback == "function")
            {
                callback();
            }
        }
    };

    // Does login for slickdeals via facebook
    sdfacebook.SlickdealsLogin = function()
    {
        var params = {
            'securitytoken': SECURITYTOKEN,
            'do': 'facebook',
            'access_token': sdfacebook.AccessToken,
            'complete_signup': sdfacebook.complete_signup,
            'chosen_username': sdfacebook.chosen_username,
            'forceUsername': sdfacebook.forceUsername,
            'newsletter': sdfacebook.newsletter,
            'modal': isModal ? 1 : 0,
            'action_source': sdfacebook.actionSource,
            'regUrl': sdfacebook.regUrl,
            'autoReg': sdfacebook.autoReg,
            'goToRegUrl': sdfacebook.goToRegUrl,
            'registrationTracking': sdfacebook.registrationTracking
        };

        if ($("input[name=fbuid]").length > 0)
        {
            params['fbuid'] = $("input[name=fbuid]").val();
        }

        $.post('/forums/sdlogin.php', params, function(data, x, request)
        {
            if ($(data).find('retry').length > 0)
            {
                sdfacebook.FacebookLogin(function(){
                    sdfacebook.SlickdealsLogin();
                });
            }
            else if ($(data).find('error').length > 0)
            {
                if (params.complete_signup)
                {
                    SD.Analytics.signUpTrack('unsuccessful');
                }
                else
                {
                    SD.Analytics.loginTrack('unsuccessful');
                }
                //window.parent.location = $(data).find('goto').text();
                if (typeof sdfacebook.getWindowParent().errordialog != 'undefined')
                {
                    sdfacebook.getWindowParent().errordialog($(data).find('error').text(), false, 200);
                }
                else if ($('#regform_errormessage').length > 0)
                {
                    $('#regform_errormessage').html($(data).find("error").text()).show();
                }
            }
            else if ($(data).find('success').length > 0)
            {
                if ($(data).find('success').attr('logintype') == 'checkout')
                {
                    if (sdfacebook.regUrl && sdfacebook.goToRegUrl)
                    {
                        window.parent.location = sdfacebook.regUrl;
                    }
                    else
                    {
                        var $checkoutForm = $('form[data-role="checkout"]');
                        $checkoutForm.find('input[name="recall"]').val(1);
                        $checkoutForm.submit();
                    }
                }
                else if ($(data).find('goto').length > 0)
                {
                    sdfacebook.getWindowParent().location = $(data).find('goto').text();
                }
                else if (sdfacebook.postRedirect)
                {
                    sdfacebook.getWindowParent().location = sdfacebook.regUrl ? sdfacebook.regUrl : '/';
                }
                // for redesign
                else if (sdfacebook.goToRegUrl && sdfacebook.regUrl)
                {
                    sdfacebook.getWindowParent().location = sdfacebook.regUrl;
                }
                else if (sdfacebook.isExtension())
                {
                    window.location = sdfacebook.regUrl;
                }
                else
                {
                    sdfacebook.getWindowParent().location.reload();
                }
            }
            else if ($(data).find('sdsso_link').length > 0)
            {
                sdfacebook.initSingleSignOnLink(data);
            }
            else if ($(data).find('checkusername').length > 0)
            {
                if (sdfacebook.skipChangeUsername)
                {
                    sdfacebook.getWindowParent().location = sdfacebook.regUrl;
                }
                else
                {
                    sdfacebook.initChooseUsername(data);
                }
            }
            else
            {
                sdfollowers.RecommendedFriendsDialog(data);
            }
        });
    };

    sdfacebook.initSingleSignOnLink = function(data){
        // hack to parse html object, since $.parseHTML isn't available at the time of writing
        var html = $('<html />').html($(data).find('sdsso_link').text());
        var socialEmail = html.find('input[name="vb_login_username"]').val();
        var socialName = html.find('input[name="fb_name"]').val();
        var username = html.find('input[name="vb_username"]').val();
        var accessToken = html.find('input[name="access_token"]').val();
        var actionSource = html.find('input[name="action_source"]').val();
        var regUrl = html.find('input[name="regUrl"]').val();

        var params = {
            'do': 'sso-link',
            'type': 'facebook',
            'username': username,
            'socialEmail': socialEmail,
            'socialName': socialName,
            'access_token': accessToken,
            'action_source': actionSource,
            'regUrl': regUrl,
            'auto': sdfacebook.autoReg,
            'goToRegUrl': sdfacebook.goToRegUrl,
            'securitytoken': SECURITYTOKEN
        };

        var url = '/forums/login.php';

        if (isModal)
        {
            url += '?modal=1';
        }

        if (sdfacebook.autoReg)
        {
            url += '?auto=1';
        }
        postLocationRedirect(url, params);
    };

    // Logs into facebook, then does the login for slickdeals
    sdfacebook.SingleSignon = function(loginArgs)
    {
        loginArgs = loginArgs || {};

        sdfacebook.setLoginArgProperties(loginArgs);

        if ($('#loginbox_signin_ajax'))
        {
            $('#loginbox_signin_ajax').css('display', 'inline-block');
            $('#loginbox_signin_ajax > img').attr('src', '/images/slickdeals/ajaxsmall.gif');
        }
        sdfacebook.FacebookLogin(function(){
            sdfacebook.SlickdealsLogin();
        });
    };

    // Callback method for the official facebook login button.
    // Also executed when someone dismisses the sign in modal without using it, which we consider an attempt since we can't
    //  listen for clicks on the button
    sdfacebook.onButtonLogin = function(loginArgs)
    {
        loginArgs = loginArgs || {};

        sdfacebook.setLoginArgProperties(loginArgs);

        sdfacebook.trackAttempt(loginArgs.regLogForm);

        sdfacebook.SlickdealsLogin();
    };

    sdfacebook.setLoginArgProperties = function(loginArgs)
    {
        sdfacebook.actionSource = loginArgs.actionSource;
        sdfacebook.regUrl       = loginArgs.regUrl;
        sdfacebook.autoReg      = loginArgs.autoReg || false;
        sdfacebook.goToRegUrl   = loginArgs.goToRegUrl || false;
        sdfacebook.skipChangeUsername = loginArgs.skipChangeUsername || false;
    };

    // Unlinks the current account from facebook, and deauthorizes the app
    sdfacebook.UnlinkFacebook = function(access_token)
    {
        $.post("/ajax/profile_ajax.php",
            {
                "do"            : "unlink_facebook",
                "securitytoken" : SECURITYTOKEN
            },
            function(data)
            {
                if (data.error)
                {
                    errordialog(data.error, false, 200);
                    return false;
                }
                else
                {
                    if (typeof(access_token) != "undefined")
                    {
                        sdfacebook.DeleteApp(access_token);
                        return true;
                    }
                    return false;
                }
            },
            "json"
        );
    };

    // Updates the facebook id on the users account, and immediately gets an extended auth token
    sdfacebook.UpdateFacebookId = function(fbid, access_token, profile, callback)
    {
        $.post("/ajax/profile_ajax.php",
            {
                "do"            : "link_facebook",
                "facebookid"    : fbid,
                "access_token"  : access_token,
                'securitytoken' : SECURITYTOKEN,
            },
            function(data)
            {
                if (data.error != false)
                {
                    if (window.dataLayer.visitor.layout == 'Classic')
                    {
                        function errorokfunc()
                        {
                            if (typeof callback == "function")
                            {
                                callback();
                            }
                        }

                        genericdialog("Error", data.error, null, errorokfunc);
                    }
                    else
                    {
                        new ErrorModal(data.error);
                    }
                }
                else
                {
                    if (typeof callback == "function")
                    {
                        callback();
                    }
                }
            },
            'json'
        );
    };

    sdfacebook.initChooseUsername = function(data){
        // hack to parse html object, since $.parseHTML isn't available at the time of writing
        var html = $('<html />').html($(data).find('checkusername').text());

        var username = html.find('input[name="vb_login_username"]').val();

        var url = '/forums/login.php?do=social-complete';

        if (isModal)
        {
            url += '&modal=1';
        }

        if (sdfacebook.regUrl)
        {
            url += '&url=' + encodeURIComponent(sdfacebook.regUrl);
        }

        if (sdfacebook.autoReg)
        {
            $('.autoRegisterModal').hide();
            require(['sd/registration/autoRegistrationUsernameModal'], function(AutoRegistrationUsernameModal){
                new AutoRegistrationUsernameModal({
                    accessToken: sdfacebook.AccessToken,
                    securityToken: SECURITYTOKEN,
                    actionSource: sdfacebook.actionSource,
                    regUrl: sdfacebook.regUrl,
                    username: username,
                    type: 'facebook'
                }).show();
            });
        }
        else
        {
            location.href = url;
        }
    };

    sdfacebook.initChooseUsernameMobile = function(data, usernameForm)
    {
        var form = data ? $($(data).find('checkusername').text()) : usernameForm, doc = $(document), overlay;

        if ($("#loginbox_overlay").length > 0)
        {
            $("#loginbox_overlay").remove();
        }

        $('body').append(form);

        $("#loginbox_overlay").show();

        $("#popup_dialog_newsletter_link").click(function () {
            $('#dialog_newsletter').dialog('open');
            return false;
        });

        // Attach events
        overlay = $('#loginbox_overlay');
        overlay.css('height', doc.height() + 'px');     // Set overlay to height of page
        overlay.click(function () {$(this).hide()});    // Hide form if overlay is clicked

        form = $('div.loginbox_container', overlay);
        form.click(function (e) {e.stopPropagation()}); // Allow clicks on form to prevent hiding stuff

        $('#loginbox_overlay').click(function(elem){
            if ($(elem.target).attr('id') == 'loginbox_overlay')
            {
                overlay.remove();
                $('#loginbox_signin_ajax').hide();
            }
        });
        $('.meh', form).click(function () {
            overlay.remove();
            $('#loginbox_signin_ajax').hide();
        }); // Allow hiding on a "never mind"

        $('#regform_choose_username', form).focus(); // Foooocus!

        $('#regform_choose_username').keyup(function(){
            $('#regform_submit').hide();
        });

        $('#regform_submit').prop('disabled', false);

        $('#regform_checkusername').click(function(){
            $('#regform_username_status > img').attr('src', '/images/slickdeals/ajaxsmall.gif');
            $('#regform_username_status').css('display', 'inline-block');

            var username = $('#regform_choose_username').val();

            sdfacebook.checkUsername(username, function(data){
                var source =  $('#regform_checkusername').data('source');
                if (data.form)
                {
                    $('body').append(data.form);
                }
                else
                {
                    if (data.error == true)
                    {
                        SD.Analytics.signUpTrack('unsuccessful');
                        if (source == "mobile3")
                        {
                            $('#regform_submit').hide();
                            $('#regform_username_status').html('Username has already been registered&hellip;')
                                .removeClass('success')
                                .addClass('failure')
                                .show();
                        }
                        else
                        {
                            $('#regform_submit').hide();
                            $('#regform_errormessage').html(data.message);
                            $('#regform_username_status > img').attr('src', '/images/slickdeals/cross.png');
                        }
                    }
                    else
                    {
                        if (source == "mobile3")
                        {
                            $('#regform_username_status').html('Username is available!')
                                .removeClass('failure')
                                .addClass('success')
                                .show();
                            $('#regform_submit').show();
                        }
                        else
                        {
                            $('#regform_errormessage').html('');
                            $('#regform_submit').show();
                            $('#regform_username_status > img').attr('src', '/images/slickdeals/tick.png');
                        }
                    }
                }
            });
            return false;
        });

        function handleChooseUserSubmitFacebook() {
            if (this.requireJS)
            {
                sdfacebook = this.sdfacebook;
            }

            if ($('.loginbox_form_container').length > 0)
            {
                $('.loginbox_form_container').block({
                    message: null,
                    overlayCSS:  {
                        backgroundColor: '',
                        opacity: 'inherit',
                        timeout: 5000
                    }
                });
            }

            sdfacebook.complete_signup = true;
            sdfacebook.chosen_username = $('#regform_choose_username').val();
            sdfacebook.emitSocialEvent = false;

            if ($('#chk_newsletter').is(':checked') == true)
            {
                sdfacebook.newsletter = 1;
            }
            else
            {
                sdfacebook.newsletter = 0;
            }
            sdfacebook.SlickdealsLogin();
        }

        $('#loginbox_overlay.loginbox_overlay_chooseuser #regform_submit').click(function() {
            handleChooseUserSubmitFacebook();
        });
    };

    sdfacebook.checkUsername = function(username, callback)
    {
        var params = {};
        params['do'] = 'check_username';
        params['username'] = username;
        params['action_source'] = sdfacebook.actionSource;
        params['regUrl'] = sdfacebook.regUrl;

        $.ajax({
            url: '/forums/sdlogin.php',
            cache: false,
            data: params,
            dataType: 'json',
            type: 'POST',
            success: function(data){
                callback(data);
            }
        });
    };

    // mobile only, used for handling redirects that need to show a certain form
    sdfacebook.initFormHandlers = function(formType, actionSource, regUrl)
    {
        // attach js to form elements
        if (formType == 'chooseUsername')
        {
            sdfacebook.initChooseUsernameMobile(false, $('#loginbox_overlay'));
        }
        else if (formType == 'ssoLink')
        {
            sdfacebook.initMobileSsoLinkForm($('#loginbox_overlay'));
        }
        // initialization done in SingleSignOn()
        sdfacebook.actionSource = actionSource;
        sdfacebook.regUrl = sdfacebook.isExtension() ? regUrl : '/';
        sdfacebook.goToRegUrl = true;
        // don't reload on post redirect because it causes security token errors
        sdfacebook.postRedirect = true;
    };

    sdfacebook.initMobileSsoLinkForm = function($overlay)
    {
        var $form = $('#sdssoForm');

        if ($overlay.length > 0)
        {
            $('#regError').show();
            $overlay.show();

            // Attach events
            $overlay.click(function(e) {
                $(e.target).hide();
            }); // Hide form if overlay is clicked

            $form.click(function(e) {
                e.stopPropagation();
            }); // Allow clicks on form to prevent hiding stuff

            $('#regform_password', $form).focus(); // Foooocus!

            $form.submit(facebookSSOLinkTracking);
        }
    };

    sdfacebook.handleDoLinkSubmit = function(ev){
        // this will hijack the form submission
        // and make it an ajax call instead
        // this allows us to handle refreshing the page after the user logs in
        ev.preventDefault();

        var requestUrl = $(ev.currentTarget).attr('action');
        var params = {};

        if (isModal)
        {
            params['modal'] = 1;
        }

        $(ev.currentTarget).find('input[name]').each(function(index){
            // get all the input fields and load it into a params
            params[$(this).attr('name')] = $(this).val();
        });

        $.post(requestUrl, params, function(data)
            {
                // TODO: Handle any additional issues
                if ($(data).find('successful_link').length > 0)
                {
                    if (params.goToRegUrl && params.regUrl)
                    {
                        sdfacebook.getWindowParent().location = params.regUrl;
                    }
                    else
                    {
                        sdfacebook.getWindowParent().location.reload();
                    }
                }
            }
        );
    };

    sdfacebook.handleChooseUsernameSubmit = function(ev){
        ev.preventDefault();

        var $currentTarget = $(ev.currentTarget);

        // setup the call
        sdfacebook.AccessToken = $currentTarget.find('input[name="access_token"]').val();
        sdfacebook.complete_signup = true;
        sdfacebook.chosen_username = $currentTarget.find('input[name="chosen_username"]').val();
        sdfacebook.newsletter = $currentTarget.find('input[name="newsletter"]').prop('checked') ? 1 : 0;
        sdfacebook.actionSource = $currentTarget.find('input[name="action_source"]').val();
        sdfacebook.regUrl = $currentTarget.find('input[name="regUrl"]').val();
        sdfacebook.emitSocialEvent = false;

        // call the parent one to handle the ajax
        sdfacebook.SlickdealsLogin();
    };

    window.elementSupportsAttribute = function (element, attribute)
    {
        var test = document.createElement(element);
        return attribute in test;
    };

    window.facebookSSOLinkTracking = function ()
    {
        params = $('#sdssoForm').serialize();
        $.ajax({
            url: '/forums/login.php',
            cache: false,
            data: params,
            dataType: 'json',
            type: 'POST',
            success: function(data) {
                if (data.successful_link == true)
                {
                    if (sdfacebook.isExtension())
                    {
                        location.href = sdfacebook.regUrl;
                    }
                    else
                    {
                        // redirect to fp
                        location.href = "/";
                    }
                }
            }
        });

        return false;
    };
}

;/*
 * jQuery dropdown: A simple dropdown plugin
 *
 * Copyright 2013 Cory LaViska for A Beautiful Site, LLC. (http://abeautifulsite.net/)
 *
 * Licensed under the MIT license: http://opensource.org/licenses/MIT
 *
 */
if (jQuery) (function ($) {

    $.extend($.fn, {
        dropdown: function (method, data) {

            switch (method) {
                case 'show':
                    show(null, $(this));
                    return $(this);
                case 'hide':
                    hide();
                    return $(this);
                case 'attach':
                    return $(this).attr('data-dropdown', data);
                case 'detach':
                    hide();
                    return $(this).removeAttr('data-dropdown');
                case 'disable':
                    return $(this).addClass('dropdown-disabled');
                case 'enable':
                    hide();
                    return $(this).removeClass('dropdown-disabled');
            }

        }
    });

    function show(event, object) {

        var ibr = $(this).closest(".itemBottomRow, .content");
        if (ibr.length == 0 || !ibr.data("user_is_touching") || !ibr.data("user_is_entering"))
        {

            var trigger = event ? $(this) : object,
                dropdown = $(trigger.attr('data-dropdown')),
                isOpen = trigger.hasClass('dropdown-open');

            // In some cases we don't want to show it
            if (event) {
                if ($(event.target).hasClass('dropdown-ignore')) return;

                event.preventDefault();
                event.stopPropagation();
            } else {
                if (trigger !== object.target && $(object.target).hasClass('dropdown-ignore')) return;
            }
            hide();

            if (isOpen || trigger.hasClass('dropdown-disabled')) return;
            
            // Show it
            trigger.addClass('dropdown-open');
            dropdown
                .data('dropdown-trigger', trigger)
                .show();

            // Position it
            position();

            // Trigger the show callback
            dropdown
                .trigger('show', {
                             dropdown: dropdown,
                             trigger: trigger
                         });
        }
    }

    function hide(event) {

        // In some cases we don't hide them
        var targetGroup = event ? $(event.target).parents().addBack() : null;

        // Are we clicking anywhere in a dropdown?
        if (targetGroup && targetGroup.is('.dropdown')) {
             // Is it a dropdown menu?
             if (targetGroup.is('.dropdown-menu')) {
                 // Did we click on an option? If so close it.
                 if (!targetGroup.is('A')) return;
             } else {
                 // Nope, it's a panel. Leave it open.
                 return;
             }
        }

        // Hide any dropdown that may be showing
        $(document).find('.dropdown:visible').each(function () {
            var dropdown = $(this);
            dropdown
                .hide()
                .removeData('dropdown-trigger')
                .trigger('hide', { dropdown: dropdown });
        });

        // Remove all dropdown-open classes
        $(document).find('.dropdown-open').removeClass('dropdown-open');
    }

    function position() {

        var dropdown = $('.dropdown:visible').eq(0),
            trigger = dropdown.data('dropdown-trigger'),
            hOffset = trigger ? parseInt(trigger.attr('data-horizontal-offset') || 0, 10) : null,
            vOffset = trigger ? parseInt(trigger.attr('data-vertical-offset') || 0, 10) : null;

        if (dropdown.length === 0 || !trigger) return;

        // Position the dropdown relative-to-parent...
        if (dropdown.hasClass('dropdown-relative')) {
            dropdown.css({
                             left: dropdown.hasClass('dropdown-anchor-right') ?
                                   trigger.position().left - (dropdown.outerWidth(true) - trigger.outerWidth(true)) - parseInt(trigger.css('margin-right'), 10) + hOffset :
                                   trigger.position().left + parseInt(trigger.css('margin-left'), 10) + hOffset,
                             top: trigger.position().top + trigger.outerHeight(true) - parseInt(trigger.css('margin-top'), 10) + vOffset
                         });
        } else {
            // ...or relative to document
            dropdown.css({
                             left: dropdown.hasClass('dropdown-anchor-right') ?
                                   trigger.offset().left - (dropdown.outerWidth() - trigger.outerWidth()) + hOffset : trigger.offset().left + hOffset,
                             top: trigger.offset().top + trigger.outerHeight() + vOffset
                         });
        }
    }

    $(document).on('click.dropdown', '[data-dropdown]', show);
    $(document).on('click.dropdown', hide);
    $(window).on('resize', position);

})(jQuery);

;(function (sdwndw) {

sdwndw.genericdialog = function (title, msg, nomodal, ok, cancel, id)
{
    var div = document.createElement('div');
    div.id = (typeof(id) == 'undefined') ? 'generic_dialog_' + parseInt(((new Date).getTime())/ 1000) : id;
    div.title = title;

    $('body').append(div);
    var gdialog = $('#' + div.id);
    var gbuttons = {};
    if (cancel)
    {
        gbuttons.Cancel = function ()
        {
            if (typeof(cancel) == "function")
            {
                cancel(this);
            }
            $(this).dialog('close');
            $('#' + div.id).remove();
        };
    }
    if (ok)
    {
        gbuttons.Ok = function ()
        {
            if (typeof(ok) == "function")
            {
                ok(this);
            }
            $(this).dialog('close');
            $('#' + div.id).remove();
        };
    }
    gdialog.dialog({
        autoOpen: false,
        zIndex: 30000,
        modal: !nomodal,
        buttons: gbuttons
    });
    gdialog.html(msg);
    gdialog.dialog('open');
    $(".ui-dialog-buttonpane button:last").focus();
    return div.id;
};

sdwndw.hidegenericdialog = function (id)
{
    id = (typeof(id) == 'undefined') ? 'generic_dialog' : id;
    var gdialog = $('#' + id);
    if (gdialog && gdialog.length > 0)
    {
        gdialog.dialog('close');
        gdialog.remove();
    }
};

sdwndw.successdialog = function (msg, okfunc, w)
{
    if (typeof $.fn.dialog === 'undefined')
    {
        alert(msg);
        return;
    }

    hidegenericdialog();
    var sdialog = $("#success_dialog");
    if (sdialog.length === 0)
    {
        $("body").append("<div id='success_dialog' title='Success'></div>");
        sdialog = $("#success_dialog");
        sdialog.dialog({
            autoOpen: false,
            modal: true,
            zIndex: 30001,
            width: w || '',
            buttons: {
                Ok: function ()
                {
                    if (okfunc)
                    {
                        okfunc(this);
                    }
                    $(this).dialog('close');
                }
            }
        });
    }
    sdialog.html(msg);
    sdialog.dialog("open");
    $(".ui-dialog-buttonpane button:last").focus();
};

sdwndw.errordialog = function (error, nobuttons, w, noOverlay)
{
    if (typeof $.fn.dialog === 'undefined')
    {
        alert(error);
        return;
    }

    hidegenericdialog();
    var errdialog = $("#errordialog"),
        noOverlay = noOverlay || false;
    if (errdialog.length === 0)
    {
        $("body").append("<div id='errordialog' title='Error'></div>");
        errdialog = $("#errordialog");
        errdialog.dialog({
            bgiframe: true,
            autoOpen: false,
            modal: !!noOverlay,
            width: w || '',
            buttons: (nobuttons ? {} : {
                Ok: function()
                {
                    $(this).dialog('close');
                }
            })
        }).parent('.ui-dialog').css('zIndex', 10000000); // I am sorry.
        // Fix for removal of z-index property in jQuery Ui v1.10
    }
    errdialog.html(error);
    errdialog.dialog('open');
    $(".ui-dialog-buttonpane button:last").focus();
};

sdwndw.unverifiedEmailDialog = function ()
{
    var $modal = $('#unverifiedEmailError');

    if ($modal.length > 0)
    {
        $modal.modal({overlayClose:true, maxWidth:'420px'});
    }

    return false;
};

})(window);

$(document).ready(function() {
    if ($("#unverifiedEmailError").length > 0)
    {
        $("body").on("click", ".sendActivationEmail", function (e) {
            e.preventDefault();
            $.resendValidation({
                success : function (response) {
                    $.modal.close();
                    successdialog(response.message, null, 300);
                }, error: function (response) {
                    $.modal.close();
                    errordialog(response.message, null, 300);
                }
            });
        });
    }
});

;/**
 * menu-aim is a jQuery plugin for dropdown menus that can differentiate
 * between a user trying hover over a dropdown item vs trying to navigate into
 * a submenu's contents.
 *
 * menu-aim assumes that you have are using a menu with submenus that expand
 * to the menu's right. It will fire events when the user's mouse enters a new
 * dropdown item *and* when that item is being intentionally hovered over.
 *
 * __________________________
 * | Monkeys  >|   Gorilla  |
 * | Gorillas >|   Content  |
 * | Chimps   >|   Here     |
 * |___________|____________|
 *
 * In the above example, "Gorillas" is selected and its submenu content is
 * being shown on the right. Imagine that the user's cursor is hovering over
 * "Gorillas." When they move their mouse into the "Gorilla Content" area, they
 * may briefly hover over "Chimps." This shouldn't close the "Gorilla Content"
 * area.
 *
 * This problem is normally solved using timeouts and delays. menu-aim tries to
 * solve this by detecting the direction of the user's mouse movement. This can
 * make for quicker transitions when navigating up and down the menu. The
 * experience is hopefully similar to amazon.com/'s "Shop by Department"
 * dropdown.
 *
 * Use like so:
 *
 *      $("#menu").menuAim({
 *          activate: $.noop,  // fired on row activation
 *          deactivate: $.noop  // fired on row deactivation
 *      });
 *
 *  ...to receive events when a menu's row has been purposefully (de)activated.
 *
 * The following options can be passed to menuAim. All functions execute with
 * the relevant row's HTML element as the execution context ('this'):
 *
 *      .menuAim({
 *          // Function to call when a row is purposefully activated. Use this
 *          // to show a submenu's content for the activated row.
 *          activate: function() {},
 *
 *          // Function to call when a row is deactivated.
 *          deactivate: function() {},
 *
 *          // Function to call when mouse enters a menu row. Entering a row
 *          // does not mean the row has been activated, as the user may be
 *          // mousing over to a submenu.
 *          enter: function() {},
 *
 *          // Function to call when mouse exits a menu row.
 *          exit: function() {},
 *
 *          // Selector for identifying which elements in the menu are rows
 *          // that can trigger the above events. Defaults to "> li".
 *          rowSelector: "> li",
 *
 *          // You may have some menu rows that aren't submenus and therefore
 *          // shouldn't ever need to "activate." If so, filter submenu rows w/
 *          // this selector. Defaults to "*" (all elements).
 *          submenuSelector: "*",
 *
 *          // Direction the submenu opens relative to the main menu. Can be
 *          // left, right, above, or below. Defaults to "right".
 *          submenuDirection: "right"
 *      });
 *
 * https://github.com/kamens/jQuery-menu-aim
*/
(function($) {

    $.fn.menuAim = function(opts) {
        // Initialize menu-aim for all elements in jQuery collection
        this.each(function() {
            init.call(this, opts);
        });

        return this;
    };

    function init(opts) {
        var $menu = $(this),
            activeRow = null,
            mouseLocs = [],
            lastDelayLoc = null,
            timeoutId = null,
            options = $.extend({
                rowSelector: "> li",
                submenuSelector: "*",
                submenuDirection: "right",
                tolerance: 75,  // bigger = more forgivey when entering submenu
                enter: $.noop,
                exit: $.noop,
                activate: $.noop,
                deactivate: $.noop,
                exitMenu: $.noop,
                xMax: false
            }, opts);

        var MOUSE_LOCS_TRACKED = 3,  // number of past mouse locations to track
            DELAY = 300;  // ms delay when user appears to be entering submenu

        /**
         * Keep track of the last few locations of the mouse.
         */
        var mousemoveDocument = function(e) {
                mouseLocs.push({x: e.pageX, y: e.pageY});

                if (mouseLocs.length > MOUSE_LOCS_TRACKED) {
                    mouseLocs.shift();
                }
            };

        /**
         * Cancel possible row activations when leaving the menu entirely
         */
        var mouseleaveMenu = function() {
                if (timeoutId) {
                    clearTimeout(timeoutId);
                }

                // If exitMenu is supplied and returns true, deactivate the
                // currently active row on menu exit.
                if (options.exitMenu(this)) {
                    if (activeRow) {
                        options.deactivate(activeRow);
                    }

                    activeRow = null;
                }
            };

        /**
         * Trigger a possible row activation whenever entering a new row.
         */
        var mouseenterRow = function() {
                if (timeoutId) {
                    // Cancel any previous activation delays
                    clearTimeout(timeoutId);
                }

                options.enter(this);
                possiblyActivate(this);
            },
            mouseleaveRow = function() {
                options.exit(this);
            };

        /*
         * Immediately activate a row if the user clicks on it.
         */
        var clickRow = function() {
                activate(this);
            };

        /**
         * Activate a menu row.
         */
        var activate = function(row) {
                if (row == activeRow) {
                    return;
                }

                if (activeRow) {
                    options.deactivate(activeRow);
                }

                options.activate(row);
                activeRow = row;
            };

        /**
         * Possibly activate a menu row. If mouse movement indicates that we
         * shouldn't activate yet because user may be trying to enter
         * a submenu's content, then delay and check again later.
         */
        var possiblyActivate = function(row) {
                var delay = activationDelay();

                if (delay) {
                    timeoutId = setTimeout(function() {
                        possiblyActivate(row);
                    }, delay);
                } else {
                    activate(row);
                }
            };

        /**
         * Return the amount of time that should be used as a delay before the
         * currently hovered row is activated.
         *
         * Returns 0 if the activation should happen immediately. Otherwise,
         * returns the number of milliseconds that should be delayed before
         * checking again to see if the row should be activated.
         */
        var activationDelay = function() {
                if (!activeRow || !$(activeRow).is(options.submenuSelector)) {
                    // If there is no other submenu row already active, then
                    // go ahead and activate immediately.
                    return 0;
                }

                var offset = $menu.offset(),
                    upperLeft = {
                        x: offset.left,
                        y: offset.top - options.tolerance
                    },
                    upperRight = {
                        x: options.xMax || offset.left + $menu.outerWidth(),
                        y: upperLeft.y
                    },
                    lowerLeft = {
                        x: offset.left,
                        y: offset.top + $menu.outerHeight() + options.tolerance
                    },
                    lowerRight = {
                        x: options.xMax || offset.left + $menu.outerWidth(),
                        y: lowerLeft.y
                    },
                    loc = mouseLocs[mouseLocs.length - 1],
                    prevLoc = mouseLocs[0];

                if (!loc) {
                    return 0;
                }

                if (!prevLoc) {
                    prevLoc = loc;
                }

                if (prevLoc.x < offset.left || prevLoc.x > lowerRight.x ||
                    prevLoc.y < offset.top || prevLoc.y > lowerRight.y) {
                    // If the previous mouse location was outside of the entire
                    // menu's bounds, immediately activate.
                    return 0;
                }

                if (lastDelayLoc &&
                        loc.x == lastDelayLoc.x && loc.y == lastDelayLoc.y) {
                    // If the mouse hasn't moved since the last time we checked
                    // for activation status, immediately activate.
                    return 0;
                }

                // Detect if the user is moving towards the currently activated
                // submenu.
                //
                // If the mouse is heading relatively clearly towards
                // the submenu's content, we should wait and give the user more
                // time before activating a new row. If the mouse is heading
                // elsewhere, we can immediately activate a new row.
                //
                // We detect this by calculating the slope formed between the
                // current mouse location and the upper/lower right points of
                // the menu. We do the same for the previous mouse location.
                // If the current mouse location's slopes are
                // increasing/decreasing appropriately compared to the
                // previous's, we know the user is moving toward the submenu.
                //
                // Note that since the y-axis increases as the cursor moves
                // down the screen, we are looking for the slope between the
                // cursor and the upper right corner to decrease over time, not
                // increase (somewhat counterintuitively).
                function slope(a, b) {
                    return (b.y - a.y) / (b.x - a.x);
                };

                var decreasingCorner = upperRight,
                    increasingCorner = lowerRight;

                // Our expectations for decreasing or increasing slope values
                // depends on which direction the submenu opens relative to the
                // main menu. By default, if the menu opens on the right, we
                // expect the slope between the cursor and the upper right
                // corner to decrease over time, as explained above. If the
                // submenu opens in a different direction, we change our slope
                // expectations.
                if (options.submenuDirection == "left") {
                    decreasingCorner = lowerLeft;
                    increasingCorner = upperLeft;
                } else if (options.submenuDirection == "below") {
                    decreasingCorner = lowerRight;
                    increasingCorner = lowerLeft;
                } else if (options.submenuDirection == "above") {
                    decreasingCorner = upperLeft;
                    increasingCorner = upperRight;
                }

                var decreasingSlope = slope(loc, decreasingCorner),
                    increasingSlope = slope(loc, increasingCorner),
                    prevDecreasingSlope = slope(prevLoc, decreasingCorner),
                    prevIncreasingSlope = slope(prevLoc, increasingCorner);

                if (decreasingSlope < prevDecreasingSlope &&
                        increasingSlope > prevIncreasingSlope) {
                    // Mouse is moving from previous location towards the
                    // currently activated submenu. Delay before activating a
                    // new menu row, because user may be moving into submenu.
                    lastDelayLoc = loc;
                    return DELAY;
                }

                lastDelayLoc = null;
                return 0;
            };

        /**
         * Hook up initial menu events
         */
        $menu
            .mouseleave(mouseleaveMenu)
            .find(options.rowSelector)
                .mouseenter(mouseenterRow)
                .mouseleave(mouseleaveRow)
                .click(clickRow);

        $(document).mousemove(mousemoveDocument);

    };
})(jQuery);
;/**
* hoverIntent is similar to jQuery's built-in "hover" function except that
* instead of firing the onMouseOver event immediately, hoverIntent checks
* to see if the user's mouse has slowed down (beneath the sensitivity
* threshold) before firing the onMouseOver event.
* 
* hoverIntent r6 // 2011.02.26 // jQuery 1.5.1+
* <http://cherne.net/brian/resources/jquery.hoverIntent.html>
* 
* hoverIntent is currently available for use in all personal or commercial 
* projects under both MIT and GPL licenses. This means that you can choose 
* the license that best suits your project, and use it accordingly.
* 
* // basic usage (just like .hover) receives onMouseOver and onMouseOut functions
* $("ul li").hoverIntent( showNav , hideNav );
* 
* // advanced usage receives configuration object only
* $("ul li").hoverIntent({
*   sensitivity: 7, // number = sensitivity threshold (must be 1 or higher)
*   interval: 100,   // number = milliseconds of polling interval
*   over: showNav,  // function = onMouseOver callback (required)
*   timeout: 0,   // number = milliseconds delay before onMouseOut function call
*   out: hideNav    // function = onMouseOut callback (required)
* });
* 
* @param  f  onMouseOver function || An object with configuration options
* @param  g  onMouseOut function  || Nothing (use configuration options object)
* @author    Brian Cherne brian(at)cherne(dot)net
*/
(function($) {
    $.fn.hoverIntent = function(f,g) {
        // default configuration options
        var cfg = {
            sensitivity: 7,
            interval: 100,
            timeout: 0
        };
        // override configuration options with user supplied object
        cfg = $.extend(cfg, g ? { over: f, out: g } : f );

        // instantiate variables
        // cX, cY = current X and Y position of mouse, updated by mousemove event
        // pX, pY = previous X and Y position of mouse, set by mouseover and polling interval
        var cX, cY, pX, pY;

        // A private function for getting mouse position
        var track = function(ev) {
            cX = ev.pageX;
            cY = ev.pageY;
        };

        // A private function for comparing current and previous mouse position
        var compare = function(ev,ob) {
            ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
            // compare mouse positions to see if they've crossed the threshold
            if ( ( Math.abs(pX-cX) + Math.abs(pY-cY) ) < cfg.sensitivity ) {
                $(ob).unbind("mousemove",track);
                // set hoverIntent state to true (so mouseOut can be called)
                ob.hoverIntent_s = 1;
                return cfg.over.apply(ob,[ev]);
            } else {
                // set previous coordinates for next time
                pX = cX; pY = cY;
                // use self-calling timeout, guarantees intervals are spaced out properly (avoids JavaScript timer bugs)
                ob.hoverIntent_t = setTimeout( function(){compare(ev, ob);} , cfg.interval );
            }
        };

        // A private function for delaying the mouseOut function
        var delay = function(ev,ob) {
            ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
            ob.hoverIntent_s = 0;
            return cfg.out.apply(ob,[ev]);
        };

        // A private function for handling mouse 'hovering'
        var handleHover = function(e) {
            // copy objects to be passed into t (required for event object to be passed in IE)
            var ev = jQuery.extend({},e);
            var ob = this;

            // cancel hoverIntent timer if it exists
            if (ob.hoverIntent_t) { ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t); }

            // if e.type == "mouseenter"
            if (e.type == "mouseenter") {
                // set "previous" X and Y position based on initial entry point
                pX = ev.pageX; pY = ev.pageY;
                // update "current" X and Y position based on mousemove
                $(ob).bind("mousemove",track);
                // start polling interval (self-calling timeout) to compare mouse coordinates over time
                if (ob.hoverIntent_s != 1) { ob.hoverIntent_t = setTimeout( function(){compare(ev,ob);} , cfg.interval );}

            // else e.type == "mouseleave"
            } else {
                // unbind expensive mousemove event
                $(ob).unbind("mousemove",track);
                // if hoverIntent state is true, then call the mouseOut function after the specified delay
                if (ob.hoverIntent_s == 1) { ob.hoverIntent_t = setTimeout( function(){delay(ev,ob);} , cfg.timeout );}
            }
        };

        // bind the function to the two event listeners
        return this.bind('mouseenter',handleHover).bind('mouseleave',handleHover);
    };
})(jQuery);

;/*
 * ScrollToFixed
 * https://github.com/bigspotteddog/ScrollToFixed
 *
 * Copyright (c) 2011 Joseph Cava-Lynch
 * MIT license
 */
(function($) {
    $.isScrollToFixed = function(el) {
        return !!$(el).data('ScrollToFixed');
    };

    $.ScrollToFixed = function(el, options) {
        // To avoid scope issues, use 'base' instead of 'this' to reference this
        // class from internal events and functions.
        var base = this;

        // Access to jQuery and DOM versions of element.
        base.$el = $(el);
        base.el = el;

        // Add a reverse reference to the DOM object.
        base.$el.data('ScrollToFixed', base);

        // A flag so we know if the scroll has been reset.
        var isReset = false;

        // The element that was given to us to fix if scrolled above the top of
        // the page.
        var target = base.$el;

        var position;
        var originalPosition;
        var originalOffsetTop;
        var originalZIndex;

        // The offset top of the element when resetScroll was called. This is
        // used to determine if we have scrolled past the top of the element.
        var offsetTop = 0;

        // The offset left of the element when resetScroll was called. This is
        // used to move the element left or right relative to the horizontal
        // scroll.
        var offsetLeft = 0;
        var originalOffsetLeft = -1;

        // This last offset used to move the element horizontally. This is used
        // to determine if we need to move the element because we would not want
        // to do that for no reason.
        var lastOffsetLeft = -1;

        // This is the element used to fill the void left by the target element
        // when it goes fixed; otherwise, everything below it moves up the page.
        var spacer = null;

        var spacerClass;

        var className;

        // Capture the original offsets for the target element. This needs to be
        // called whenever the page size changes or when the page is first
        // scrolled. For some reason, calling this before the page is first
        // scrolled causes the element to become fixed too late.
        function resetScroll() {
            // Set the element to it original positioning.
            target.trigger('preUnfixed.ScrollToFixed');
            setUnfixed();
            target.trigger('unfixed.ScrollToFixed');

            // Reset the last offset used to determine if the page has moved
            // horizontally.
            lastOffsetLeft = -1;

            // Capture the offset top of the target element.
            offsetTop = target.offset().top;

            // Capture the offset left of the target element.
            offsetLeft = target.offset().left;

            // If the offsets option is on, alter the left offset.
            if (base.options.offsets) {
                offsetLeft += (target.offset().left - target.position().left);
            }

            if (originalOffsetLeft == -1) {
                originalOffsetLeft = offsetLeft;
            }

            position = target.css('position');

            // Set that this has been called at least once.
            isReset = true;

            if (base.options.bottom != -1) {
                target.trigger('preFixed.ScrollToFixed');
                setFixed();
                target.trigger('fixed.ScrollToFixed');
            }
        }

        function getLimit() {
            var limit = base.options.limit;
            if (!limit) return 0;

            if (typeof(limit) === 'function') {
                return limit.apply(target);
            }
            return limit;
        }

        // Returns whether the target element is fixed or not.
        function isFixed() {
            return position === 'fixed';
        }

        // Returns whether the target element is absolute or not.
        function isAbsolute() {
            return position === 'absolute';
        }

        function isUnfixed() {
            return !(isFixed() || isAbsolute());
        }

        // Sets the target element to fixed. Also, sets the spacer to fill the
        // void left by the target element.
        function setFixed() {
            // Only fix the target element and the spacer if we need to.
            if (!isFixed()) {
                // Set the spacer to fill the height and width of the target
                // element, then display it.
                spacer.css({
                    'display' : target.css('display'),
                    'width' : target.outerWidth(true),
                    'height' : target.outerHeight(true),
                    'float' : target.css('float')
                });

                // Set the target element to fixed and set its width so it does
                // not fill the rest of the page horizontally. Also, set its top
                // to the margin top specified in the options.

                cssOptions={
                    'z-index' : base.options.zIndex,
                    'position' : 'fixed',
                    'top' : base.options.bottom == -1?getMarginTop():'',
                    'bottom' : base.options.bottom == -1?'':base.options.bottom,
                    'margin-left' : '0px'
                }
                if (!base.options.dontSetWidth){ cssOptions['width']=target.width(); };

                target.css(cssOptions);

                target.addClass(base.options.baseClassName);

                if (base.options.className) {
                    target.addClass(base.options.className);
                }

                position = 'fixed';
            }
        }

        function setAbsolute() {

            var top = getLimit();
            var left = offsetLeft;

            if (base.options.removeOffsets) {
                left = '';
                top = top - offsetTop;
            }

            cssOptions={
              'position' : 'absolute',
              'top' : top,
              'left' : left,
              'margin-left' : '0px',
              'bottom' : ''
            }
            if (!base.options.dontSetWidth){ cssOptions['width']=target.width(); };

            target.css(cssOptions);

            position = 'absolute';
        }

        // Sets the target element back to unfixed. Also, hides the spacer.
        function setUnfixed() {
            // Only unfix the target element and the spacer if we need to.
            if (!isUnfixed()) {
                lastOffsetLeft = -1;

                // Hide the spacer now that the target element will fill the
                // space.
                spacer.css('display', 'none');

                // Remove the style attributes that were added to the target.
                // This will reverse the target back to the its original style.
                target.css({
                    'z-index' : originalZIndex,
                    'width' : '',
                    'position' : originalPosition,
                    'left' : '',
                    'top' : originalOffsetTop,
                    'margin-left' : ''
                });

                target.removeClass('scroll-to-fixed-fixed');

                if (base.options.className) {
                    target.removeClass(base.options.className);
                }

                position = null;
            }
        }

        // Moves the target element left or right relative to the horizontal
        // scroll position.
        function setLeft(x) {
            // Only if the scroll is not what it was last time we did this.
            if (x != lastOffsetLeft) {
                // Move the target element horizontally relative to its original
                // horizontal position.
                target.css('left', offsetLeft - x);

                // Hold the last horizontal position set.
                lastOffsetLeft = x;
            }
        }

        function getMarginTop() {
            var marginTop = base.options.marginTop;
            if (!marginTop) return 0;

            if (typeof(marginTop) === 'function') {
                return marginTop.apply(target);
            }
            return marginTop;
        }

        // Checks to see if we need to do something based on new scroll position
        // of the page.
        function checkScroll() {
            if (!$.isScrollToFixed(target)) return;
            var wasReset = isReset;

            // If resetScroll has not yet been called, call it. This only
            // happens once.
            if (!isReset) {
                resetScroll();
            } else if (isUnfixed()) {
                // if the offset has changed since the last scroll,
                // we need to get it again.

                // Capture the offset top of the target element.
                offsetTop = target.offset().top;

                // Capture the offset left of the target element.
                offsetLeft = target.offset().left;
            }

            // Grab the current horizontal scroll position.
            var x = $(window).scrollLeft();

            // Grab the current vertical scroll position.
            var y = $(window).scrollTop();

            // Get the limit, if there is one.
            var limit = getLimit();

            // If the vertical scroll position, plus the optional margin, would
            // put the target element at the specified limit, set the target
            // element to absolute.
            if (base.options.minWidth && $(window).width() < base.options.minWidth) {
                if (!isUnfixed() || !wasReset) {
                    postPosition();
                    target.trigger('preUnfixed.ScrollToFixed');
                    setUnfixed();
                    target.trigger('unfixed.ScrollToFixed');
                }
            } else if (base.options.maxWidth && $(window).width() > base.options.maxWidth) {
                if (!isUnfixed() || !wasReset) {
                    postPosition();
                    target.trigger('preUnfixed.ScrollToFixed');
                    setUnfixed();
                    target.trigger('unfixed.ScrollToFixed');
                }
            } else if (base.options.bottom == -1) {
                // If the vertical scroll position, plus the optional margin, would
                // put the target element at the specified limit, set the target
                // element to absolute.
                if (limit > 0 && y >= limit - getMarginTop()) {
                    if (!isAbsolute() || !wasReset) {
                        postPosition();
                        target.trigger('preAbsolute.ScrollToFixed');
                        setAbsolute();
                        target.trigger('unfixed.ScrollToFixed');
                    }
                // If the vertical scroll position, plus the optional margin, would
                // put the target element above the top of the page, set the target
                // element to fixed.
                } else if (y >= offsetTop - getMarginTop()) {
                    if (!isFixed() || !wasReset) {
                        postPosition();
                        target.trigger('preFixed.ScrollToFixed');

                        // Set the target element to fixed.
                        setFixed();

                        // Reset the last offset left because we just went fixed.
                        lastOffsetLeft = -1;

                        target.trigger('fixed.ScrollToFixed');
                    }
                    // If the page has been scrolled horizontally as well, move the
                    // target element accordingly.
                    setLeft(x);
                } else {
                    // Set the target element to unfixed, placing it where it was
                    // before.
                    if (!isUnfixed() || !wasReset) {
                        postPosition();
                        target.trigger('preUnfixed.ScrollToFixed');
                        setUnfixed();
                        target.trigger('unfixed.ScrollToFixed');
                    }
                }
            } else {
                if (limit > 0) {
                    if (y + $(window).height() - target.outerHeight(true) >= limit - (getMarginTop() || -getBottom())) {
                        if (isFixed()) {
                            postPosition();
                            target.trigger('preUnfixed.ScrollToFixed');

                            if (originalPosition === 'absolute') {
                                setAbsolute();
                            } else {
                                setUnfixed();
                            }

                            target.trigger('unfixed.ScrollToFixed');
                        }
                    } else {
                        if (!isFixed()) {
                            postPosition();
                            target.trigger('preFixed.ScrollToFixed');
                            setFixed();
                        }
                        setLeft(x);
                        target.trigger('fixed.ScrollToFixed');
                    }
                } else {
                    setLeft(x);
                }
            }
        }

        function getBottom() {
            if (!base.options.bottom) return 0;
            return base.options.bottom;
        }

        function postPosition() {
            var position = target.css('position');

            if (position == 'absolute') {
                target.trigger('postAbsolute.ScrollToFixed');
            } else if (position == 'fixed') {
                target.trigger('postFixed.ScrollToFixed');
            } else {
                target.trigger('postUnfixed.ScrollToFixed');
            }
        }

        var windowResize = function(event) {
            // Check if the element is visible before updating it's position, which
            // improves behavior with responsive designs where this element is hidden.
            if(target.is(':visible')) {
                isReset = false;
                checkScroll();
            }
        }

        var windowScroll = function(event) {
            (!!window.requestAnimationFrame) ? requestAnimationFrame(checkScroll) : checkScroll();
        }

        // From: http://kangax.github.com/cft/#IS_POSITION_FIXED_SUPPORTED
        var isPositionFixedSupported = function() {
            var container = document.body;

            if (document.createElement && container && container.appendChild && container.removeChild) {
                var el = document.createElement('div');

                if (!el.getBoundingClientRect) return null;

                el.innerHTML = 'x';
                el.style.cssText = 'position:fixed;top:100px;';
                container.appendChild(el);

                var originalHeight = container.style.height,
                originalScrollTop = container.scrollTop;

                container.style.height = '3000px';
                container.scrollTop = 500;

                var elementTop = el.getBoundingClientRect().top;
                container.style.height = originalHeight;

                var isSupported = (elementTop === 100);
                container.removeChild(el);
                container.scrollTop = originalScrollTop;

                return isSupported;
            }

            return null;
        }

        var preventDefault = function(e) {
            e = e || window.event;
            if (e.preventDefault) {
                e.preventDefault();
            }
            e.returnValue = false;
        }

        // Initializes this plugin. Captures the options passed in, turns this
        // off for devices that do not support fixed position, adds the spacer,
        // and binds to the window scroll and resize events.
        base.init = function() {
            // Capture the options for this plugin.
            base.options = $.extend({}, $.ScrollToFixed.defaultOptions, options);

            originalZIndex = target.css('z-index')

            // Turn off this functionality for devices that do not support it.
            // if (!(base.options && base.options.dontCheckForPositionFixedSupport)) {
            //     var fixedSupported = isPositionFixedSupported();
            //     if (!fixedSupported) return;
            // }

            // Put the target element on top of everything that could be below
            // it. This reduces flicker when the target element is transitioning
            // to fixed.
            base.$el.css('z-index', base.options.zIndex);

            // Create a spacer element to fill the void left by the target
            // element when it goes fixed.
            spacer = $('<div />');

            position = target.css('position');
            originalPosition = target.css('position');

            originalOffsetTop = target.css('top');

            // Place the spacer right after the target element.
            if (isUnfixed()) base.$el.after(spacer);

            // Reset the target element offsets when the window is resized, then
            // check to see if we need to fix or unfix the target element.
            $(window).bind('resize.ScrollToFixed', windowResize);

            // When the window scrolls, check to see if we need to fix or unfix
            // the target element.
            $(window).bind('scroll.ScrollToFixed', windowScroll);

            // For touch devices, call checkScroll directlly rather than
            // rAF wrapped windowScroll to animate the element
            if ('ontouchmove' in window) {
              $(window).bind('touchmove.ScrollToFixed', checkScroll);
            }

            if (base.options.preFixed) {
                target.bind('preFixed.ScrollToFixed', base.options.preFixed);
            }
            if (base.options.postFixed) {
                target.bind('postFixed.ScrollToFixed', base.options.postFixed);
            }
            if (base.options.preUnfixed) {
                target.bind('preUnfixed.ScrollToFixed', base.options.preUnfixed);
            }
            if (base.options.postUnfixed) {
                target.bind('postUnfixed.ScrollToFixed', base.options.postUnfixed);
            }
            if (base.options.preAbsolute) {
                target.bind('preAbsolute.ScrollToFixed', base.options.preAbsolute);
            }
            if (base.options.postAbsolute) {
                target.bind('postAbsolute.ScrollToFixed', base.options.postAbsolute);
            }
            if (base.options.fixed) {
                target.bind('fixed.ScrollToFixed', base.options.fixed);
            }
            if (base.options.unfixed) {
                target.bind('unfixed.ScrollToFixed', base.options.unfixed);
            }

            if (base.options.spacerClass) {
                spacer.addClass(base.options.spacerClass);
            }

            target.bind('resize.ScrollToFixed', function() {
                spacer.height(target.height());
            });

            target.bind('scroll.ScrollToFixed', function() {
                target.trigger('preUnfixed.ScrollToFixed');
                setUnfixed();
                target.trigger('unfixed.ScrollToFixed');
                checkScroll();
            });

            target.bind('detach.ScrollToFixed', function(ev) {
                preventDefault(ev);

                target.trigger('preUnfixed.ScrollToFixed');
                setUnfixed();
                target.trigger('unfixed.ScrollToFixed');

                $(window).unbind('resize.ScrollToFixed', windowResize);
                $(window).unbind('scroll.ScrollToFixed', windowScroll);

                target.unbind('.ScrollToFixed');

                //remove spacer from dom
                spacer.remove();

                base.$el.removeData('ScrollToFixed');
            });

            // Reset everything.
            windowResize();
        };

        // Initialize the plugin.
        base.init();
    };

    // Sets the option defaults.
    $.ScrollToFixed.defaultOptions = {
        marginTop : 0,
        limit : 0,
        bottom : -1,
        zIndex : 1000,
        baseClassName: 'scroll-to-fixed-fixed'
    };

    // Returns enhanced elements that will fix to the top of the page when the
    // page is scrolled.
    $.fn.scrollToFixed = function(options) {
        return this.each(function() {
            (new $.ScrollToFixed(this, options));
        });
    };
})(jQuery);

;/*
 * Lazy Load - jQuery plugin for lazy loading images
 *
 * Copyright (c) 2007-2012 Mika Tuupola
 *
 * Licensed under the MIT license:
 *   http://www.opensource.org/licenses/mit-license.php
 *
 * Project home:
 *   http://www.appelsiini.net/projects/lazyload
 *
 * Version:  1.7.0
 *
 */
(function($, window) {

    $window = $(window);

    $.fn.lazyload = function(options) {
        var settings = {
            threshold       : 0,
            failure_limit   : 0,
            event           : "scroll",
            effect          : "show",
            container       : window,
            data_attribute  : "original",
            skip_invisible  : true,
            appear          : null,
            load            : null
        };

        if(options) {
            /* Maintain BC for a couple of version. */
            if (undefined !== options.failurelimit) {
                options.failure_limit = options.failurelimit;
                delete options.failurelimit;
            }
            if (undefined !== options.effectspeed) {
                options.effect_speed = options.effectspeed;
                delete options.effectspeed;
            }

            $.extend(settings, options);
        }

        /* Fire one scroll event per scroll. Not one scroll event per image. */
        var elements = this;
        if (0 == settings.event.indexOf("scroll")) {
            $(settings.container).bind(settings.event, function(event) {
                var counter = 0;
                elements.each(function() {
                    $this = $(this);
                    if (settings.skip_invisible && !$this.is(":visible")) return;
                    if ($.abovethetop(this, settings) ||
                        $.leftofbegin(this, settings)) {
                            /* Nothing. */
                    } else if (!$.belowthefold(this, settings) &&
                        !$.rightoffold(this, settings)) {
                            $this.trigger("appear");
                    } else {
                        if (++counter > settings.failure_limit) {
                            return false;
                        }
                    }
                });
            });
        }

        this.each(function() {
            var self = this;
            var $self = $(self);

            self.loaded = false;

            /* When appear is triggered load original image. */
            $self.one("appear", function() {
                if (!this.loaded) {
                    if (settings.appear) {
                        var elements_left = elements.length;
                        settings.appear.call(self, elements_left, settings);
                    }
                    $("<img />")
                        .bind("load", function() {
                            $self
                                .hide()
                                .attr("src", $self.data(settings.data_attribute))
                                [settings.effect](settings.effect_speed);
                            self.loaded = true;

                            /* Remove image from array so it is not looped next time. */
                            var temp = $.grep(elements, function(element) {
                                return !element.loaded;
                            });
                            elements = $(temp);

                            if (settings.load) {
                                var elements_left = elements.length;
                                settings.load.call(self, elements_left, settings);
                            }
                        })
                        .attr("src", $self.data(settings.data_attribute));
                };
            });

            /* When wanted event is triggered load original image */
            /* by triggering appear.                              */
            if (0 != settings.event.indexOf("scroll")) {
                $self.bind(settings.event, function(event) {
                    if (!self.loaded) {
                        $self.trigger("appear");
                    }
                });
            }
        });

        var event_registered = $(settings.container).data("jquery_lazyload_registered_"+settings.event);
        if (!event_registered)
        {
            $(settings.container).data("jquery_lazyload_registered_"+settings.event, true);
            /* Check if something appears when window is resized. */
            $window.bind("resize", function(event) {
                $(settings.container).trigger(settings.event);
            });
        }

        /* Force initial check if images should appear. */
        $(settings.container).trigger(settings.event);

        return this;

    };

    /* Convenience methods in jQuery namespace.           */
    /* Use as  $.belowthefold(element, {threshold : 100, container : window}) */

    $.belowthefold = function(element, settings) {
        if (settings.container === undefined || settings.container === window) {
            var fold = $window.height() + $window.scrollTop();
        } else {
            var fold = $(settings.container).offset().top + $(settings.container).height();
        }
        return fold <= $(element).offset().top - settings.threshold;
    };

    $.rightoffold = function(element, settings) {
        if (settings.container === undefined || settings.container === window) {
            var fold = $window.width() + $window.scrollLeft();
        } else {
            var fold = $(settings.container).offset().left + $(settings.container).width();
        }
        return fold <= $(element).offset().left - settings.threshold;
    };

    $.abovethetop = function(element, settings) {
        if (settings.container === undefined || settings.container === window) {
            var fold = $window.scrollTop();
        } else {
            var fold = $(settings.container).offset().top;
        }
        return fold >= $(element).offset().top + settings.threshold  + $(element).height();
    };

    $.leftofbegin = function(element, settings) {
        if (settings.container === undefined || settings.container === window) {
            var fold = $window.scrollLeft();
        } else {
            var fold = $(settings.container).offset().left;
        }
        return fold >= $(element).offset().left + settings.threshold + $(element).width();
    };

    $.inviewport = function(element, settings) {
         return !$.rightofscreen(element, settings) && !$.leftofscreen(element, settings) &&
                !$.belowthefold(element, settings) && !$.abovethetop(element, settings);
     };

    /* Custom selectors for your convenience.   */
    /* Use as $("img:below-the-fold").something() */

    $.extend($.expr[':'], {
        "below-the-fold" : function(a) { return $.belowthefold(a, {threshold : 0, container: window}) },
        "above-the-top"  : function(a) { return !$.belowthefold(a, {threshold : 0, container: window}) },
        "right-of-screen": function(a) { return $.rightoffold(a, {threshold : 0, container: window}) },
        "left-of-screen" : function(a) { return !$.rightoffold(a, {threshold : 0, container: window}) },
        "in-viewport"    : function(a) { return !$.inviewport(a, {threshold : 0, container: window}) },
        /* Maintain BC for couple of versions. */
        "above-the-fold" : function(a) { return !$.belowthefold(a, {threshold : 0, container: window}) },
        "right-of-fold"  : function(a) { return $.rightoffold(a, {threshold : 0, container: window}) },
        "left-of-fold"   : function(a) { return !$.rightoffold(a, {threshold : 0, container: window}) }
    });

})(jQuery, window);

;(function (window)
{
    var parseQueryString = function (queryString)
    {
        if (!queryString.length) return {};
        var queryStringKVPairs = queryString.split('&'),
                queryMap = {};


        for (var i = 0; i < queryStringKVPairs.length; i++)
        {
            var kv = queryStringKVPairs[i].split('=');
            queryMap[decodeURIComponent(kv.shift())] = decodeURIComponent(kv.join('='));
        }

        return queryMap;
    };

    var parseGacSessionData = function (cookieString)
    {
        var gaqCookie = cookieString.match(/__utmz=(?:[0-9]+\.)+([^;]+)/);

        if (!gaqCookie) return {};
        var parameters = ("|" + gaqCookie[1]).match(/\|utmc[a-z]{2}=.*?(?=\|utm|$)/g);
        var campaign = {};
        for (var i = 0; i < parameters.length; i++)
        {
            var kv = parameters[i].substr(1).split('=');
            var k = kv.shift();
            var v = decodeURIComponent(kv.join('='));

            if (k == 'utmcsr') campaign.source = v;
            if (k == 'utmccn') campaign.campaign = v;
            if (k == 'utmcmd') campaign.medium = v;
            if (k == 'utmctr') campaign.term = v;
            if (k == 'utmcct') campaign.content = v;
        }

        return campaign;
    };

    var hasGacActiveCookie = function (cookieString)
    {
        return !!cookieString.match(/__utmb=[^;]+/);
    };

    var cleanValue = function (v)
    {
        if (typeof(v) == "undefined" || v == null || v == '(not set)' || v == '(direct)' || v == '(none)')
        {
            return '';
        }
        return v;
    };

    var compareCampaigns = function (c1, c2)
    {
        if (cleanValue(c1.source) != cleanValue(c2.source)) return false;
        if (cleanValue(c1.campaign) != cleanValue(c2.campaign)) return false;
        if (cleanValue(c1.medium) != cleanValue(c2.medium)) return false;
        if (cleanValue(c1.term) != cleanValue(c2.term)) return false;
        return cleanValue(c1.content) == cleanValue(c2.content);
    };

    var jct = function (queryMap, previousCampaign, referrerHost, referrerPath, currentHost, isNew)
    {
        this.queryMap = queryMap;
        this.previousCampaign = previousCampaign;
        this.referrerHost = referrerHost;
        this.referrerPath = referrerPath;
        this.currentHost = currentHost;
        this.overrideCampaign = {};
        this.isNew = isNew;
    };

    jct.prototype.getCampaignData = function ()
    {
        var campaign = {};

        if (this.queryMap.gclid || this.queryMap.gclsrc)
        {
            campaign.source = 'google';
            campaign.medium = 'cpc';
            campaign.campaign = this.queryMap.utm_campaign;
            campaign.term = this.queryMap.utm_term;
            campaign.content = this.queryMap.utm_content;
        }
        else if (this.overrideCampaign.source)
        {
            campaign.source = this.overrideCampaign.source;
            campaign.medium = this.overrideCampaign.medium || '(not set)';
            campaign.campaign = this.overrideCampaign.campaign || '(not set)';
            campaign.term = this.overrideCampaign.term;
            campaign.content = this.overrideCampaign.content;
        }
        else if (this.queryMap.utm_source)
        {
            campaign.source = this.queryMap.utm_source;
            campaign.medium = this.queryMap.utm_medium || '(not set)';
            campaign.campaign = this.queryMap.utm_campaign || '(not set)';
            campaign.term = this.queryMap.utm_term;
            campaign.content = this.queryMap.utm_content;
        }
        else
        {
            if (this.referrerHost && this.referrerHost != this.currentHost)
            {
                campaign.source = this.referrerHost;
                campaign.medium = 'referral';
                campaign.campaign = '(referral)';
                campaign.content = this.referrerPath;
            }
            else
            {
                campaign.source = this.previousCampaign.source || '(direct)';
                campaign.medium = this.previousCampaign.medium || '(not set)';
                campaign.campaign = this.previousCampaign.campaign || '(not set)';
                campaign.term = this.previousCampaign.term;
                campaign.content = this.previousCampaign.content;
            }
        }
        campaign.isNew = this.isNew || !compareCampaigns(campaign, this.previousCampaign);
        return campaign;
    };

    jct.track = function (campaign)
    {
        var referrerData = document.referrer.match(/^https?:\/\/([^/]+)(\/.*)$/);
        var rHost = referrerData ? referrerData[1] : null;
        var rPath = referrerData ? referrerData[2] : null;

        var tracker = new jct(parseQueryString(window.location.search.substr(1)), parseGacSessionData(window.document.cookie), rHost, rPath, window.location.hostname, !hasGacActiveCookie(window.document.cookie));
        if (campaign) tracker.overrideCampaign = campaign;
        return tracker.getCampaignData();
    };

    window.jct = jct;
})(window);
;window.liveStoreCategorySearch = {
    currentAjaxRequest: null,
    result: {},
    timeoutId: undefined,
    clickingResult: false,    //If someone is clicking a result, dont remove the link (previously results removed before the mouseclick finished)

    performAjaxRequest: function()
    {
        if ($("form#globalSearch input[name='q']").val().length <= 2)
        {
            this.cancelAll();
            return false;
        }

        liveStoreCategorySearch = this;
        this.abortCurrentAjax();
        this.currentAjaxRequest = $.ajax({
            type: "get",
            url: "/ajax/liveStoreCategorySearch.php",
            data: $("form#globalSearch").serialize(),
            dataType: "json",
            success: function(result)
            {
                liveStoreCategorySearch.result = result;
                liveStoreCategorySearch.removeResults();
                if (result.category_count > 0)
                {
                    liveStoreCategorySearch.printResults();
                }
            }
        });
        return true;
    },

    printResults: function()
    {
        $(this.result.html).insertAfter("form#globalSearch input[name='q']");
        return true;
    },

    removeResults: function()
    {
        $(".searchSuggest").remove();
        this.clicking = false;
        return true;
    },

    cancelAll: function()
    {
        $("input#search").val("");
        this.abortCurrentAjax();
        if (!this.clickingResult)
        {
            this.removeResults();
        }
        clearTimeout(this.timeoutId);
        return true;
    },

    abortCurrentAjax: function()
    {
        if (this.currentAjaxRequest)
        {
            this.currentAjaxRequest.abort();
            this.currentAjaxRequest = null;
        }
    },

    queueAjax: function()
    {
        this.cancelAjax();
        this.timeoutId = setTimeout(function()
        {
            $(".globalNav > li > ul.subContainer").hide(); //close the navigation in case it is open
            liveStoreCategorySearch.performAjaxRequest();
        }, 250);
    },

    cancelAjax: function()
    {
        if (typeof this.timeoutId == 'number')
        {
            clearTimeout(this.timeoutId);
            this.timeoutId = undefined;
        }
    }
};

$(document).ready(function () {

    $('body').on('mousedown','.searchSuggest', function(){
        liveStoreCategorySearch.clickingResult = true;
    });

    $("#globalSearch input[name='q']").on(
        'keyup', function () {
            liveStoreCategorySearch.queueAjax();
        }
    ).on(
        'blur', function () {
            liveStoreCategorySearch.cancelAjax();
            setTimeout(
                function () {
                    liveStoreCategorySearch.cancelAll();
                }, 80
            )
        }
    ).attr('autocomplete', 'off');

    $('#globalSearch input[name="src"]').val('SearchBarV2');

});
;/* eslint-disable */
if (typeof(window.SD) === "undefined")
{
    window.SD = {};
}

if (typeof(window.dataLayer) === "undefined")
{
    window.dataLayer = {};
}

SD.Analytics = {
    socialFollow: function (socialNetwork)
    {
        "use strict";

        if (typeof(dataLayer.social) === "undefined")
        {
            dataLayer.social = {
                platform: ""
            };
        }

        if (socialNetwork !== "")
        {
            dataLayer.social.platform = socialNetwork;
        }

        return true;
    },
    socialShare: function (shareType)
    {
        "use strict";

        if (typeof(dataLayer.social) === "undefined")
        {
            dataLayer.social = {
                platform: ""
            };
        }

        if (shareType !== "")
        {
            dataLayer.social.platform = shareType;
        }

        return true;
    },
    loginTrack: function(trackType)
    {
        return false;
    },
    signUpTrack: function(trackType)
    {
        return false;
    },
    newsletterTrack: function(trackType)
    {
        return false;
    },
    'recordCheckoutTrackableAction': function (action)
    {
        if (typeof dataLayer.checkout === 'undefined')
        {
            dataLayer.checkout = {};
        }

        if (dataLayer.checkout.trackableAction !== action)
        {
            dataLayer.checkout.trackableAction = action;
        }
    },
    dtmTrackRegLogin: function(event, actionSource)
    {
        if (typeof window.gtmDl === 'undefined' || !('registrationTracking' in window.dataLayer))
        {
            return;
        }

        /**
         * We expect a few things:
         * - this is being used primarily for registration, login, newsletter signups, or social registration
         * - previous events should have populated dataLayer.registrationTracking either via:
         *   - regLogController population
         *   - server-side rehydration (if applicable still)
         * - the actual gtm event is fired. No voodoo
         */
        const formType = window.dataLayer.registrationTracking.type.split('|');
        const flow = formType[1].charAt(0).toUpperCase() + formType[1].slice(1);
        const eventData = {
            'event': event,
            'js rl action source': actionSource,
            'js rl category': flow,
            'js rl form experience': formType[0].charAt(0).toUpperCase() + formType[0].slice(1),
            'js rl form flow': flow,
            'js rl label': window.dataLayer.registrationTracking.method,
        };

        if ('newsletterSubscriptionId' in window.dataLayer.registrationTracking)
        {
            eventData['js rl newsletter subscription id'] = window.dataLayer.newsletterSubscriptionId;
        }

        window.gtmDl.push(eventData);
    },
    sendOutclick: function (outclickData)
    {
        window.dataLayer.product = window.dataLayer.product || {};
        window.dataLayer.outclick = {};
        dataLayer.product.products = outclickData.productId ? ';' + outclickData.productId : '';
        dataLayer.product.forum = outclickData.forum;
        dataLayer.product.exitWebsite = outclickData.exitWebsite;
        dataLayer.outclick.typeOfOutclick = outclickData.typeOfOutclick;
        dataLayer.outclick.identifier = outclickData.adobeRef;
        dataLayer.outclick.clickType = outclickData.clickType;
        if (typeof outclickData.query === 'object')
        {
            if ('sdtrk' in outclickData.query)
            {
                dataLayer.outclick.sdTrack = outclickData.query.sdtrk;
            }
            if ('attr_track' in outclickData.query)
            {
                dataLayer.outclick.attrTrack = '';
                if (outclickData.query.attr_track.length > 100)
                {
                    var lastPipe = outclickData.query.attr_track.lastIndexOf('|', 100);
                    dataLayer.outclick.attrTrack = outclickData.query.attr_track.substr(0, lastPipe);
                }
                else
                {
                    dataLayer.outclick.attrTrack = outclickData.query.attr_track;
                }
            }
        }
    },
    injectSDTrk: function (url, sdtrk)
    {
        var delim, uSplode = new RegExp("u(\\d+)=");

        sdtrk = 'sdtrk=' + sdtrk;

        if (uSplode.test(url))
        {
            delim = uSplode.exec(url);
            delim = ["u", delim[1], "="].join("");

            url = url.split(delim);
            url[0] = url[0] + sdtrk + "&";
            url = url.join(delim);
        }
        else
        {
            url = url.indexOf("?") > 0 ?
                (url + "&" + sdtrk) :
                (url + "?" + sdtrk);
        }

        return url;
    },
    trackActivityMap: function (link, region)
    {
        window.s_objectID = link;
        window.s_regionID = region;
    },
    'trackTestEvent': function (category, label)
    {
        category = category.replace('|', '');
        label = label.replace('|', '');

        dataLayer.abTestEventDataDirect = category + '|' + label;
    },
    addDataLayerProductTitle: function(title)
    {
        if (typeof(dataLayer.product) === "undefined")
        {
            dataLayer.product = {
                title: title
            };
        }
        else
        {
            dataLayer.product.title = title;
        }
    },
    addDataLayerProductId: function(threadId)
    {
        if (typeof(dataLayer.product) === "undefined")
        {
            dataLayer.product = {
                products: ';' + threadId
            };
        }
        else
        {
            dataLayer.product.products = ';' + threadId;
        }
    },
    addDataLayerCouponIdentifier: function(couponId)
    {
        "use strict";

        if (typeof(dataLayer.coupon) === "undefined")
        {
            dataLayer.coupon = {
                identifier: couponId
            };
        }
        else
        {
            dataLayer.coupon.identifier = couponId;
        }
    },
    ajaxThreadTracking: function(threadids)
    {
        var threadString = "";
        for (var i = 0; i < threadids.length; i++)
        {
            threadString += ";" + threadids[i] + ","
        }
        threadString = threadString.substring(0, (threadString.length - 1));
        dataLayer.product.products = threadString;
    },
    addDataLayerProductTileNumber: function(tilePosition)
    {
        if (typeof(dataLayer.product) === "undefined")
        {
            dataLayer.product = {
                tileNumber: tilePosition
            };
        }
        else
        {
            dataLayer.product.tileNumber = tilePosition;
        }
    },
    addDataLayerProductFireSign: function(fireSignEnabled)
    {
        var fireSignOn = fireSignEnabled ? 'yes' : 'no';

        if (typeof(dataLayer.product) === "undefined")
        {
            dataLayer.product = {
                fireSign: fireSignOn
            };
        }
        else
        {
            dataLayer.product.fireSign = fireSignOn;
        }
    },
    addDataLayerProductModule: function(moduleName)
    {
        if (typeof(dataLayer.product) === "undefined")
        {
            dataLayer.product = {
                module: moduleName
            };
        }
        else
        {
            dataLayer.product.module = moduleName;
        }
    },
    trackDealClick: function(threadId, position, fireSign, module)
    {
        SD.Analytics.addDataLayerProductId(threadId);
        SD.Analytics.addDataLayerProductTileNumber(position);
        SD.Analytics.addDataLayerProductFireSign(fireSign);
        SD.Analytics.addDataLayerProductModule(module);
    },
    getGridTilePosition: function(tileIndex)
    {
        var windowWidth =  $(window).width();
        var tilesPerRow = 7;

        if (windowWidth < 1099)
        {
            tilesPerRow = 4;
        }
        else if (windowWidth < 1372)
        {
            tilesPerRow = 5;
        }
        else if (windowWidth < 1540)
        {
            tilesPerRow = 6;
        }

        var row = Math.ceil(tileIndex / tilesPerRow);
        var col = tileIndex % tilesPerRow == 0 ? tilesPerRow : tileIndex % tilesPerRow;

        return row + ':' + col;
    },
    getClassicGridTilePosition: function(tileIndex)
    {
        var windowWidth =  $(window).width();
        var tilesPerRow = 6;

        if (windowWidth < 1117)
        {
            tilesPerRow = 4;
        }
        else if (windowWidth < 1270)
        {
            tilesPerRow = 5;
        }

        var row = Math.ceil(tileIndex / tilesPerRow);
        var col = tileIndex % tilesPerRow == 0 ? tilesPerRow : tileIndex % tilesPerRow;

        return row + ':' + col;
    },
    getClassicCategoryTilePosition: function(tileIndex)
    {
        var windowWidth =  $(window).width();
        var tilesPerRow = 3;

        if (windowWidth < 1344)
        {
            tilesPerRow = 2;
        }

        var row = Math.ceil(tileIndex / tilesPerRow);
        var col = tileIndex % tilesPerRow == 0 ? tilesPerRow : tileIndex % tilesPerRow;

        return row + ':' + col;
    },
    handleFpDealLink: function(linkElement, view)
    {
        var parentElement, headingElement, position;

        if (view == 'redesign')
        {
            parentElement = linkElement.closest('.fpGridBox');
            headingElement = linkElement.closest('.gridCategory').find('.headingLeft');

            if (parentElement.hasClass('grid'))
            {
                position = SD.Analytics.getGridTilePosition(parentElement.first().index());
            }
            else
            {
                position = parentElement.first().index() + 1 + ':1';
            }
        }
        else if (view == 'classic')
        {
            parentElement = linkElement.closest('.dealitem');
            headingElement = parentElement.prevAll('.deal_header_date:first');

            if ($("#deal_list").hasClass("grid"))
            {
                position = SD.Analytics.getClassicGridTilePosition(parentElement.data('position'));
            }
            else
            {
                position = parentElement.data('position') + ':1';
            }
        }
        else if (view == 'mobile')
        {
            parentElement = linkElement.closest('.coupon-content');
            headingElement = linkElement.closest('.wrapper').prev().find('.date');
            position = parentElement.data('position') + ':1';
        }

        var threadId = parentElement.data('threadid');
        var fireDeal = parentElement.hasClass('firedeal');
        var heading = headingElement.data('deal-list-heading') || headingElement.text().trim();

        SD.Analytics.trackDealClick(threadId, position, fireDeal, heading);
    },
    handleClassicFpDetailsLink: function(linkElement)
    {
        var parentElement = linkElement.closest('.deal_body');

        var threadId = parentElement.prev().data('threadid');
        var fireDeal = parentElement.prev().hasClass('firedeal');
        var position = parentElement.prev().data('position') + ':1';
        var heading = parentElement.prevAll('.deal_header_date:first').find('.deal_header_date_link').text().trim();

        SD.Analytics.trackDealClick(threadId, position, fireDeal, heading);
    },
    handlePopularDealLink: function(linkElement, view)
    {
        var parentElement, heading;

        if (view == 'mobile')
        {
            parentElement = linkElement.closest('.coupon-content');
            heading = linkElement.closest('.wrapper').prev().find('.date').text().trim();
        }
        else
        {
            parentElement = linkElement.closest('.dealRow');
            heading = $('.popularDealsPageTitle').data('heading');
        }

        var threadId = parentElement.data('threadid');
        var fireDeal = parentElement.hasClass('firedeal');
        var position = parentElement.data('position') + ':1';

        SD.Analytics.trackDealClick(threadId, position, fireDeal, heading);
    },
    handleStoreDealLink: function(linkElement, view)
    {
        var parentElement, position, headingElement;

        if (view == 'classic')
        {
            parentElement = linkElement.closest('.deal_block');
            headingElement = '.fpcontent.store.deals';

            position = SD.Analytics.getClassicCategoryTilePosition(parentElement.data('position'));
        }
        else if (view == 'redesign')
        {
            parentElement = linkElement.closest('.item');
            position = parentElement.data('bestorder') + ':1';
            headingElement = '#storeTop';
        }
        else if (view == 'mobile')
        {
            parentElement = linkElement.closest('.coupon-content');
            position = parentElement.data('position') + ':1';
            headingElement = '#dealWrapper';
        }

        var threadId = parentElement.data('threadid');
        var fireDeal = parentElement.hasClass('firedeal');
        var heading = $(headingElement).data('heading');

        SD.Analytics.trackDealClick(threadId, position, fireDeal, heading);
    },
    addDataLayerFrontpageLayout: function(layoutType)
    {
        if (typeof(dataLayer.frontpage) === "undefined")
        {
            dataLayer.frontpage = {
                layout: layoutType
            };
        }
        else
        {
            dataLayer.frontpage.layout = layoutType;
        }
    },
    updateFormFunnel: function (type, entryPoint, entryPage, status)
    {
        dataLayer.formFunnel = {
            type: type,
            entryPoint: entryPoint,
            status: status,
            startPage: entryPage
        };
    },
    handleClick: function (selector, callback)
    {
        this.clickHandlers.push({selector: selector, callback: callback});
    },
    clickHandlers: [],
    processGlobalClick: function (ev)
    {
        var sendClickEvent = false;
        $.each(SD.Analytics.clickHandlers, function (i, handler)
        {
            var matches = $(ev.target).closest(handler.selector);
            if (matches.length)
            {
                sendClickEvent = handler.callback(matches) || sendClickEvent;
            }
        });
    },
    modalImpressionTrack: function(modalName)
    {
        if (modalName.length === 0)
        {
            return;
        }

        if (!dataLayer.modal)
        {
            dataLayer.modal = {};
        }
        dataLayer.modal.modalName = modalName;
    }
};

window.dataLayer.gaCampaign = jct.track();

window.sdLoadQueue.push([function()
{
    "use strict";

    if (!!window['\u200BsdAnalytics'] === false)
    {
        window['\u200BsdAnalytics'] = true;
    }
    else
    {
        return false;
    }

    //Adobe social sharing analytics tracking
    $('.social-follow').on('click', function()
    {
        SD.Analytics.socialFollow($(this).data('platform'));
        return true;
    });

    $('.social-share').on('click', function()
    {
        SD.Analytics.socialShare($(this).data('platform'));
        return true;
    });

   $(window).on('click', SD.Analytics.processGlobalClick);

    SD.Analytics.handleClick("[data-funnel-entry][data-funnel-type]", function (target)
    {
        SD.Analytics.updateFormFunnel(target.data('funnel-type'), target.data('funnel-entry'), dataLayer.page.pageName, 'started');
        var funnelCookie = SD.CookieService.session.getCookie('funnel');
        funnelCookie.setType(target.data('funnel-type'), 1, target.data('funnel-entry'), dataLayer.page.pageName);
        SD.CookieService.session.setCookie('funnel', funnelCookie);
        return true;
    });

    var formInteracted = false;
    var funnelForms = $("form[data-funnel-type]");
    funnelForms.each(function ()
    {
        var type = $(this).closest("form").data('funnel-type');
        var funnels = SD.CookieService.session.getCookie('funnel');
        var funnelTypeData = funnels.getType(type);
        var entry, statuses;
        if (!funnelTypeData)
        {
            entry = '(none specified)';
            statuses = 'started';

            SD.Analytics.updateFormFunnel(type, entry, entry, statuses);
            funnels.setType(type, 1, entry, entry);
            SD.CookieService.session.setCookie('funnel', funnels);
        }

    });
    funnelForms.find("input,select,textarea").click(function ()
    {
        if (!formInteracted)
        {
            var type = $(this).closest("form").data('funnel-type');
            var funnels = SD.CookieService.session.getCookie('funnel');
            var funnelData = funnels.getType(type);
            var state, entry, startPage, statuses;
            if (funnelData)
            {
                state = funnelData.state;
                entry = funnelData.entryPoint;
                startPage = funnelData.startPage;
                statuses = 'interacted';
            }
            else
            {
                state = 1;
                startPage = entry = '(none specified)';
                statuses = 'interacted';
            }

            if (state == 1)
            {
                SD.Analytics.updateFormFunnel(type, entry, startPage, statuses);
                funnels.setType(type, 2, entry, startPage);
                SD.CookieService.session.setCookie('funnel', funnels);
            }
        }
    });

    // Sign-up, Login, Newsletter Tracking
    if (window.location.href.indexOf('login=1') >= 0)
    {
        SD.Analytics.loginTrack('successful');
    }

    $('.track-sign-up').on('click', function(ev) {
        SD.Analytics.signUpTrack('start');
        return true;
    });

    $('.track-login').on('click', function(ev) {
        SD.Analytics.loginTrack('start');
        return true;
    });

    $('.track-newsletter-checkbox').on('click', function(ev)
    {
        if (this.checked)
        {
            SD.Analytics.newsletterTrack('start');
            return true;
        }
    });

    $('.track-fpDealLink').on('click', function(ev) {
        SD.Analytics.handleFpDealLink($(ev.target), 'redesign');
        return true;
    });

    $(document).on('click', '.track-fpDealDetailLink', function(ev) {
        SD.Analytics.handleFpDealLink($(this), 'redesign');
        return true;
    });

    $(document).on('click', '.track-classicFpDetailsLink', function(ev) {
        SD.Analytics.handleClassicFpDetailsLink($(this));
        return true;
    });

    $('.track-popularDealLink').on('click', function(ev) {
        SD.Analytics.handlePopularDealLink($(this));
        return true;
    });

    $('.track-storeDealLink').on('click', function(ev) {
        SD.Analytics.handleStoreDealLink($(this), 'redesign');
        return true;
    });

    $('.track-classicStoreDealLink').on('click', function(ev) {
        SD.Analytics.handleStoreDealLink($(this), 'classic');
        return true;
    });

    $(document).on('click', '#dealWrapper .coupon-content a', function(ev) {
        SD.Analytics.handleStoreDealLink($(this), 'mobile');
        return true;
    });

    $(document).on('click', '.box.onFrontPage a', function(ev) {
        SD.Analytics.handleFpDealLink($(this), 'mobile');
        return true;
    });

    $(document).on('click', '.box.onPopularDeals a', function(ev) {
        SD.Analytics.handlePopularDealLink($(this), 'mobile');
        return true;
    });
}, 'analytics']);


;/* eslint-disable */
window.sd_outclick_handler = window.sd_outclick_handler || [];
if (typeof(window.SD) === "undefined")
{
    window.SD = {};
}

(function(SD) {
    const moduleReferrerHandler = {
        moduleCookieNames: ['mo_gtm', 'mo_pos'],
        moduleReferrers: {},
        transferCookiesToMemory: function ()
        {
            const cookies = this.getCookies();

            for (let i = 0; i < cookies.length; i++)
            {
                const cookie = cookies[i].split('=');

                if (this.moduleCookieNames.indexOf(cookie[0]) > -1)
                {
                    this.moduleReferrers[cookie[0]] = cookie[1];
                    this.clearCookie(cookie[0]);
                }
            }
        },
        getReferrers: function ()
        {
            // If no referrer is set, try once more in the case where the current outclick
            // is directly from a module, meaning the cookie was set AFTER page load but before
            // the outclick
            if (Object.keys(this.moduleReferrers).length === 0)
            {
                this.transferCookiesToMemory();
            }

            return this.moduleReferrers;
        },
        removeReferrers: function ()
        {
            this.moduleReferrers = {};
        },
        getCookies: function ()
        {
            return document.cookie.split('; ');
        },
        clearCookie: function (cookieName)
        {
            document.cookie = cookieName + '=false; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT';
        }
    };

    // On page load, determine if the user was referred to the page by a module. If they were,
    // they will have a session cookie (mo_gtm) set to the name of the referring module. This
    // name will be sent to GTM as a module outclick if they outclick from this page
    moduleReferrerHandler.transferCookiesToMemory();

    var outclickRegex = /\/\?(?:|.*?&)(pno|lno|u2|u1|u3|sid|tid|sn|cno|kat|ccid|ddid|bfid)(?:=|&|$)/;
    var hrefIsOutclick = function (target)
    {
        return target.href.match(outclickRegex);
    };
    var listener = function (ev) {
        var target = ev.target;
        var maxDepth = 10;

        while (target && maxDepth--)
        {
            if (target.nodeName == 'A'
                    && (target.oldHref || hrefIsOutclick(target)))
            {
                break;
            }

            target = target.parentNode;
            if (!target || target == document.body || maxDepth <= 0)
            {
                return;
            }
        }

        if (ev.type == 'mousedown')
        {
            var ua = window.navigator.userAgent;
            var isIe = ua.indexOf('MSIE ') > -1 || ua.indexOf('Trident/') > -1 || ua.indexOf('Edge/') > -1;

            if (isIe && (ev.ctrlKey || ev.button == 1) && !target.oldHref)
            {
                target.oldHref = target.href;
                target.href = 'javascript:;';
            }
        }

        if (ev.type == 'click')
        {
            if (target.oldHref)
            {
                target.href = target.oldHref;
                delete target.oldHref;
            }
            if (ev.button == 0)
            {
                if (ev.ctrlKey)
                {
                    ev.clickType = 'Ctrl+Click';
                }
                else if (ev.metaKey)
                {
                    ev.clickType = 'Ctrl+Click';
                }
                else if (ev.shiftKey)
                {
                    ev.clickType = 'Shift+Click';
                }
                else
                {
                    ev.clickType = 'Left Click';
                }
            }
            else if (ev.button == 1)
            {
                ev.clickType = 'Middle Click';
            }
            else if (ev.button == 2)
            {
                //right clicks will be handled by contextmenu
                return;
            }
            else
            {
                ev.clickType = 'Unknown Click';
            }
            callOutclickListenersFromEvent(ev, target);
        }
        else if (ev.type == 'contextmenu')
        {
            if (ev.button == 2)
            {
                ev.clickType = 'Right Click';
                callOutclickListenersFromEvent(ev, target);
            }
        }
    };

    window.addEventListener('mousedown', listener);
    window.addEventListener('click', listener);
    window.addEventListener('contextmenu', listener);

    var outclickListeners = [];

    var callOutclickListenersFromEvent = function (ev, target)
    {
        if (ev.triggeredOutclick || ev.skipOutclick)
        {
            return;
        }
        else
        {
            ev.triggeredOutclick = true;
        }
        callOutclickListeners(target, 'href', target.href, ev.clickType);
    };

    var callOutclickListeners = function (target, attribute, url, clickType)
    {
        var outclickData = buildOutclickData(target, attribute, url, clickType);
        for (var i = 0; i < outclickListeners.length; i++)
        {
            outclickListeners[i](outclickData);
        }
    };

    var buildOutclickData = function (target, attribute, url, clickType)
    {
        var uuid = getAndIncrementSid();

        if (!clickType)
        {
            clickType = 'custom';
        }

        var queryData = {},
            parts = url.split('?');

        if (parts.length > 1)
        {
            var queryString = parts[1];
            var queryParts = queryString.split('&');
            for (var p = queryParts.length - 1; p >= 0; p--)
            {
                var param = queryParts[p].split('=');
                queryData[param[0]] = decodeURIComponent(param[1]);
            }
        }

        return {
            productId: target.getAttribute('data-product-products'),
            forum: target.getAttribute('data-product-forum'),
            exitWebsite: target.getAttribute('data-product-exitwebsite'),
            typeOfOutclick: target.getAttribute('data-outclick-typeofoutclick'),
            adobeRef: uuid,
            clickType: clickType,
            url: url,
            query: queryData,
            target: target,
            attribute: attribute,
            sdtrk: 'sdtrk' in queryData ? queryData.sdtrk : null
        };
    };

    SD.OutclickListener = {
        onOutclick : function (cb)
        {
            outclickListeners.push(cb);
        },
        hitManualOutclick: function (target, attribute, url, clickType)
        {
            if (url.match(outclickRegex))
            {
                if (!clickType)
                {
                    clickType = 'custom';
                }
                callOutclickListeners(target, attribute, url, clickType);
            }
        },
        outclickLinkRewriter: function (outclickData)
        {
            var url = outclickData.url;
            var target = outclickData.target;
            var attribute = outclickData.attribute;
            if (!target || !attribute)
            {
                return;
            }

            var urlParts = url.split('?',2);
            var qs, path = urlParts[0];
            var uuid = outclickData.adobeRef;
            if (urlParts.length === 2)
            {
                qs = url.substring(path.length + 1);
            }
            else
            {
                qs = '';
            }
            qs = qs.replace(/(adobeRef=[^&]*(&|$)|^)/, 'adobeRef=' + uuid + '&');

            let newUrl = path + '?' + qs;

            if (window.sdExtensionPresent === 'Yes')
            {
                const brxMst = 'Feature:Extension:';
                try
                {
                    url = new URL(newUrl, window.location.origin);
                    if (url.searchParams.get('exp') !== 'brx')
                    {
                        let mst = url.searchParams.get('attr_track') || '';
                        if (mst.indexOf(brxMst) === -1)
                        {
                            if (mst)
                            {
                                mst += '|';
                            }
                            mst += brxMst + 'Not Used';
                            url.searchParams.set('attr_track', mst);
                            const u2 = url.searchParams.get('u2');
                            if (u2)
                            {
                                url.searchParams.delete('u2');
                                url.searchParams.set('u2', u2);
                            }
                            newUrl = url.toString();
                        }
                    }
                }
                catch(ex)
                {
                    console.log(ex);
                }
            }

            target.setAttribute(attribute, newUrl);
        },
        adobeOutclickHandler: function (outclickData)
        {
            SD.Analytics.sendOutclick(outclickData);
        },
        heapOutclickHandler: function (outclickData)
        {
            if (typeof window.heap !== 'undefined')
            {
                let clickElm = outclickData.target;
                const parentElm = findClosestElement(clickElm, '[data-module-name]');

                if (!clickElm.hasAttribute('data-module-item'))
                {
                    while (clickElm.tagName !== 'BODY' && !clickElm.hasAttribute('data-module-item'))
                    {
                        clickElm = clickElm.parentNode;
                    }
                }

                let children = undefined;

                if (parentElm) {
                    children = Array.prototype.filter.call(parentElm.querySelectorAll('[data-module-item]'), function (elm) {
                        return elm.offsetParent !== null;
                    });
                }

                let heapProperties = [];

                heapProperties.adobeRef = outclickData && outclickData.adobeRef ? outclickData.adobeRef : undefined;
                heapProperties.moduleName = this.getOutclickModuleName(parentElm);
                heapProperties.moduleItemPosition = this.getOutclickModuleItemPosition(clickElm, children);

                window.heap.track('Outclick', {
                    adobeRef: heapProperties.adobeRef,
                    moduleName: heapProperties.moduleName,
                    moduleItemPosition: heapProperties.moduleItemPosition
                });
            }
        },
        gtmOutclickHandler: function (outclickData)
        {
            if (typeof gtmDl !== 'undefined')
            {
                outclickData = outclickData || {};

                const gtmOutclickData = {
                    'event': 'sdOutclick',
                    'outclickData': outclickData,
                    'flowSource': outclickData.sdtrk
                };

                gtmDl.push(gtmOutclickData);

                if (moduleReferrerHandler.getReferrers())
                {
                    const referrerData = moduleReferrerHandler.getReferrers();

                    if ('mo_gtm' in referrerData)
                    {
                        const gtmModuleOutclickData = {
                            'event': 'Module Outclick',
                            'moduleName': referrerData['mo_gtm'],
                        };

                        gtmDl.push(gtmModuleOutclickData);
                    }

                    if ('mo_pos' in referrerData && typeof window.gtmDl !== 'undefined')
                    {
                        gtmDl.push({'moduleItemPosition': referrerData['mo_pos']});
                    }

                    moduleReferrerHandler.removeReferrers();
                }
            }
        },
        getOutclickModuleName: function (parentElm) {
            let moduleName = parentElm && parentElm.dataset ? parentElm.dataset.moduleName : undefined;

            if (!moduleName) {
                const referrerData = moduleReferrerHandler.getReferrers();

                moduleName = (referrerData && 'mo_gtm' in referrerData) ? referrerData['mo_gtm'] : undefined;
            }

            return moduleName;
        },
        getOutclickModuleItemPosition: function (clickElm, children) {
            let position = (clickElm && clickElm.tagName && clickElm.tagName === 'BODY') || undefined === children ? undefined : children.indexOf(clickElm) + 1;

            if (!position) {
                const referrerData = moduleReferrerHandler.getReferrers();

                position = (referrerData && 'mo_pos' in referrerData) ? referrerData['mo_pos'] : undefined;
            }

            return position;
        }
    };

    var getAndIncrementSid = function()
    {
        "use strict";

        var sid, counter;

        if (!window.hasOwnProperty('\u200BviewSid'))
        {
            return '';
        }

        sid = window['\u200BviewSid'];

        counter = parseInt(sid.substring(32) , 16);
        counter += 1;

        window['\u200BviewSid'] = sid.substring(0, 32) + ('0000' + counter.toString(16)).substr(-4);

        return sid;
    };

    SD.OutclickListener.onOutclick(function (outclickData)
    {
        SD.OutclickListener.outclickLinkRewriter(outclickData);
        SD.OutclickListener.adobeOutclickHandler(outclickData);
        SD.OutclickListener.heapOutclickHandler(outclickData);
        SD.OutclickListener.gtmOutclickHandler(outclickData);
    });

    for (var i = 0; i < sd_outclick_handler.length; i++)
    {
        SD.OutclickListener.onOutclick(sd_outclick_handler[i]);
    }

    sd_outclick_handler.push = function (i) {
        SD.OutclickListener.onOutclick(i);
    };
})(window.SD);

;jQuery.extend({
    resendValidation: function (callbacks) {

        var defaults = {
            success : function (message) {},
            error: function (errorMessage) {}
        };

        callbacks = $.extend({}, defaults, callbacks);

        var activationData = {
            "do": "emailcode",
            "securitytoken": SECURITYTOKEN
        };

        $.post("/forums/register.php", activationData, function (data) {
            if (data.status == 'success')
            {
                if (callbacks.success)
                {
                    data.message = "Email Sent! Please activate the link in the email to complete registration for the Slickdeals community.";
                    callbacks.success(data);
                }
            }
            else
            {
                if (callbacks.error)
                {
                    data.message = "We could not find a user with the email provided.  Please try again.";
                    callbacks.error(data);
                }
            }
        }, "json");

    }
});

window.resendValidationResponse = function (data)
{
    if (data.status == 'success')
    {
        $.modal(
            '<div id="resendResponseModal" class="modal">' +
                '<span class="icon icon-check"></span>' +
                '<div class="headline">Email Sent</div>' +
                '<div class="content">' +
                    '<p>Account validation email has been sent to <strong>' + data.email + '</strong></p>' +
                '</div>' +
            '</div>'
            , {
                overlayClose: true,
                onShow: function() {
                    var timer;
                    $('#simplemodal-container').bind({
                        mouseenter: function() {
                            clearTimeout(timer);
                        },
                        mouseleave: function() {
                            timer = setTimeout($.modal.close, 2000);
                        }
                    }).trigger('mouseleave');
                }
            });
    }
    else
    {
        $.modal(
            '<div id="resendResponseModal" class="modal">' +
                '<span class="icon icon-close3"></span>' +
                '<div class="headline">Email failed to send</div>' +
            '</div>'
        , {
            overlayClose: true,
            onShow: function() {
                var timer;
                $('#simplemodal-container').bind({
                    mouseenter: function() {
                        clearTimeout(timer);
                    },
                    mouseleave: function() {
                        timer = setTimeout($.modal.close, 2000);
                    }
                }).trigger('mouseleave');
            }
        });
    }
}
;if (typeof jQuery != 'undefined')
{
    'use strict';

    /*
     * Reusable Javascript UI components used to handle common UI patterns.
     *
     * @author Rob Erekson
     *
     * NOTE: All components are wrapped in an if statement checking for undefined to make sure components aren't
     * created twice.
     */

    String.prototype.normalizeSlug = function()
    {
        return this.trim().toLowerCase().replace(' ', '-');
    }


    if (typeof TreeCheck == 'undefined')
    {
        window.TreeCheck = function(element, options)
        {
            this.init(element, options);
        }

        TreeCheck.prototype = $.extend({}, TreeCheck.prototype, {
            constructor: TreeCheck,

            init: function(element, options)
            {
                this.$element = $(element);
                this.options = $.extend({}, {
                    id: 0,
                    parent: 0
                }, options, this.$element.data());

                if (!this.options.id)
                {
                    this.options.id = this.$element.val();
                }

                this.$element.on('click', this._handleClick.bind(this));
                this.$element.data('TreeView', this);
            },
            _handleClick: function(e)
            {
                this.set(this.$element.prop('checked'));
            },
            set: function(checked)
            {
                $('input[type="checkbox"][data-parent="' + this.options.id + '"]')
                    .not(this.$element)
                    .prop('checked', checked)
                    .filter('[data-ui*="tree-check"]').each(function()
                    {
                        $(this).data('TreeView').set(checked);
                    });
            }
        });
        $.fn.treeCheck = function(options)
        {
            return this.each(function()
            {
                new TreeCheck(this, options);
            });
        }
    }

    if (typeof Clickable == 'undefined')
    {
        /**
         * DEPRECATED - PLEASE USE sd/ui/linkableElement instead.
         * 
         * Makes an entire element clickable as if it were a link.
         *
         * Usage:
         * Add 'data-ui="clickable" and data-href="{{url}}"' attributes to element, where {{url}} is the URL a click will direct to.
         *
         * Options:
         *  href:   (string)    URL to link to when element is clicked
         *
         * Example:
         * <div data-ui="clickable" data-href="/index.php">...</div>
         *
         * Note:
         * Any <a> elements inside of a Clickable element will retain their normal functionality (linking to their own href attribute).
         *
         * @param (DOM element) element - The element to create the component on
         * @param (object) options - Options for the component
         * @constructor Clickable
         */
        window.Clickable = function(element, options)
        {
            this.init(element, options);
        }

        Clickable.prototype = $.extend({}, Clickable.prototype, {
            constructor: Clickable,
            init: function(element, options)
            {
                this.$element = $(element);
                this.options = $.extend({}, {
                    href: ''
                }, options, this.$element.data());
                this.$element.on('click', this._handleClick.bind(this));
                this.$element.addClass('ui-clickable');
                this.$element.data('Clickable', this);
            },
            _handleClick: function(event)
            {
                if (!$(event.target).is('a'))
                {
                    if (this.options.href)
                    {
                        location.href = this.options.href;
                    }
                }
            }
        });

        /**
         * Plugin definition for Clickable component
         *
         * @param (object) options
         * @returns (jQuery) Original jQuery object for chaining
         */
        $.fn.clickable = function(options)
        {
            this.each(function()
            {
                new Clickable(this, options);
            });
            return this;
        }
    }


    if (typeof Collapsible == 'undefined')
    {
        /**
         * Show/hide element(s) when a click occurs on the trigger element(s).
         *
         * Usage:
         * Add 'data-ui="collapsible" attribute to element, along with any desired options listed below. Any element with a data attribute
         * of 'data-action="toggle-collapsible"' will serve as a trigger for the collapsing action
         *
         * Options:
         *  collapse:           (string)    Selector for the element(s) to show/hide
         *  toggleIcon:         (string)    Selector for an icon element to toggle classes on when collapsible is activated (optional)
         *  toggleIconClass:    (string)    Class names to toggle (e.g. 'icon-arrow-up icon-arrow-down')
         *  animate:            (boolean)   Use animation when showing/hiding element?
         *
         * Example:
         * <div data-ui="collapsible" data-toggle-icon=".icon" data-toggle-icon="icon-arrow-up icon-arrow-down" data-animate="false">
         *      <span class="icon icon-arrow-up" data-action="toggle-collapsible"></span>
         *      <div class="collapsible">...</div>
         * </div>
         *
         * @param (DOM element) element - The element to bind the component to
         * @param (object) options - Options for the component
         * @constructor Collapsible
         */
        window.Collapsible = function(element, options)
        {
            this.init(element, options);
        }

        Collapsible.prototype = $.extend({}, Collapsible.prototype, {
            constructor: Collapsible,
            init: function(element, options)
            {
                this.$element = $(element);
                this.options = $.extend({}, {
                    collapse: '.collapsible',
                    toggleIcon: '',
                    toggleIconClass: '',
                    animate: true
                }, options, this.$element.data());
                if (!this.$element.data('Collapsible'))
                {
                    this.$element.addClass('ui-collapsible');
                    this.$collapsibleElms = this.$element.find(this.options.collapse);
                    this.$toggleIconElms = this.$element.find('[data-collapsible-class-toggle]');
                    this.isCollapsed = !this.$collapsibleElms.is(':visible');
                    this.$element.find('[data-action="toggle-collapsible"]').on('click', this._handleClick.bind(this));
                    this.$element.data('Collapsible', this);
                }
            },
            _handleClick: function(event)
            {
                event.preventDefault();
                this._toggle();
            },
            _toggle: function()
            {
                if (this.options.animate)
                {
                    this.$collapsibleElms.slideToggle(200);
                    this.$toggleIconElms.each(function()
                    {
                        var $elm = $(this);
                        $elm.toggleClass($elm.data('collapsibleClassToggle'));
                    });
                }
                else
                {
                    this.$collapsibleElms.toggle();
                    this.$toggleIconElms.toggleClass(this.options.toggleIconClass);
                }
                this.isCollapsed = !this.isCollapsed;
                if (!this.isCollapsed)
                {
                    this.$collapsibleElms.css('overflow-y', 'auto');
                }
            },
            isVisible: function()
            {
                return !this.isCollapsed;
            },
            expand: function()
            {
                if (!this.isVisible())
                {
                    this._toggle();
                }
            },
            collapse: function()
            {
                if (this.isVisible())
                {
                    this._toggle();
                }
            }
        });


        /**
         * Plugin definition for Collapsible component
         *
         * @param (object) options
         * @returns (jQuery) Original jQuery object
         */
        $.fn.collapsible = function(options)
        {
            return this.each(function()
            {
                new Collapsible(this, options);
            });
        }
    }

    if (typeof TreeView == 'undefined')
    {
        /**
         * Handles collapsing of nested ULs in a "tree" view.
         *
         * Usage:
         * Add 'data-ui="tree-view" attributes to a UL element. For any elements used to collapse/expand the nested lists, add trigger selectors for
         * both 'show' and 'hide' triggers.
         *
         * Options:
         *  collapsed:      (bool)    If tree should be completely collapsed on load
         *
         * Example:
         * <ul data-ui="tree-view">
         *     <li>Option 1</li>
         *     <li>
         *         <a href="#" data-tree-view-trigger="show">+</a>
         *         <a href="#" data-tree-view-trigger="hide">-</a>
         *         Option 2
         *         <ul>
         *             <li>Option 2a</li>
         *             <li>Option 2b</li>
         *         </ul>
         *     </li>
         * </ul>
         *
         * Note:
         * Any desired styling for the tree view can be used. This component merely handles the Javascript functionality.
         *
         * @param (DOM element) element - The element to create the component on
         * @param (object) options - Options for the component
         * @constructor TreeView
         */
        window.TreeView = function(element, options)
        {
            this.init(element, options);
        }

        TreeView.prototype = $.extend({}, TreeView.prototype, {
            constructor: TreeView,
            init: function(element, options)
            {
                this.$element = $(element);
                if (!this.$element.is('ul'))
                {
                    return;
                }
                this.options = $.extend({}, {
                    defaultCollapsed: true
                }, options, this.$element.data());
                this.settings = {
                    trigger: '[data-tree-view-trigger]',
                    triggerHide: '[data-tree-view-trigger="hide"]',
                    triggerShow: '[data-tree-view-trigger="show"]',
                    dataObjs: 'tree-view-objs',
                    expandedClass: 'ui-treeview-expanded',
                    animationSpeed: 200
                }
                this.$triggerElms = this.$element.find(this.settings.trigger);
                this.$element.attr('data-ui-tree-view', '');

                this._crawlTree(this.$element);

                if (this.options.defaultCollapsed)
                {
                    this.$element.find('ul').hide();
                    this.$element.find(this.settings.triggerHide).hide();
                }

                this.$triggerElms.on('click', this._handleClick.bind(this));
                this.$element.data('TreeView', this);
            },
            _handleClick: function(event)
            {
                event.preventDefault();
                var $liElm = $(event.target).closest('li'),
                    $childElm = $liElm.data(this.settings.dataObjs).child;

                if ($childElm.length)
                {
                    if ($childElm.is(':visible'))
                    {
                        this.collapse($liElm);
                    }
                    else
                    {
                        this.expand($liElm);
                    }
                }
            },
            collapse: function(liElm)
            {
                var $liElm = $(liElm);
                if ($liElm.is('.ui-treeview-expanded'))
                {
                    $liElm.data(this.settings.dataObjs).child.slideUp(this.settings.animationSpeed, function()
                    {
                        // Make sure the element is always hidden since slideUp won't do anything if the element is hidden via its parent
                        $(this).hide();
                    });
                    $liElm.data(this.settings.dataObjs).triggerHide.hide();
                    $liElm.data(this.settings.dataObjs).triggerShow.show();
                    $liElm.removeClass(this.settings.expandedClass);
                }
            },
            collapseAll: function(ulElm)
            {
                var that = this,
                    $ulElm = $(ulElm);
                if (!$ulElm.length)
                {
                    $ulElm = this.$element;
                }
                $ulElm.children('li').each(function()
                {
                    var $liElm = $(this);
                    that.collapse($liElm);
                    if ($liElm.data(that.settings.dataObjs) && $liElm.data(that.settings.dataObjs).child.length)
                    {
                        that.collapseAll($liElm.data(that.settings.dataObjs).child);
                    }
                });
            },
            expand: function(liElm)
            {
                var $liElm = $(liElm);
                if (!$liElm.data(this.settings.dataObjs).child.is(':visible'))
                {
                    $liElm.data(this.settings.dataObjs).child.slideDown(this.settings.animationSpeed);
                    $liElm.data(this.settings.dataObjs).triggerHide.show();
                    $liElm.data(this.settings.dataObjs).triggerShow.hide();
                    $liElm.addClass(this.settings.expandedClass);
                }
            },
            _crawlTree: function(ulElm)
            {
                var $ulElm = $(ulElm);
                if (!$ulElm.is('ul'))
                {
                    return;
                }
                var that = this;
                $ulElm.children('li').each(function(idx, liElm)
                {
                    var $liElm = $(liElm);
                    $liElm.data(that.settings.dataObjs, {
                        child: $liElm.children('ul'),
                        triggerShow: $liElm.children(that.settings.triggerShow),
                        triggerHide: $liElm.children(that.settings.triggerHide)
                    });
                    $liElm.data(that.settings.dataObjs).child.each(function(idx, childUlElm)
                    {
                        that._crawlTree(childUlElm);
                    });
                });
            },
            makeVisible: function(liElm, debug)
            {
                var $liElm = $(liElm);
                if (!this.$element)
                {
                    $liElm.closest('ul[data-ui-tree-view]').data('TreeView').makeVisible($liElm, debug);
                    return;
                }
                var that = this;
                $liElm.parentsUntil('ul[data-ui-tree-view]', 'li').each(function()
                {
                    that.expand($(this));
                });
            }
        });

        /**
         * Plugin definition for TreeView component
         *
         * @param (object) options
         * @returns (jQuery) Original jQuery object for chaining
         */
        $.fn.treeView = function(options)
        {
            return this.each(function()
            {
                new TreeView(this, options);
            });
        }
    }

    if (typeof ScreenOverlay == 'undefined')
    {
        /**
         * An opaque overlay that covers the page content while an action is being performed.
         *
         * Usage:
         * Create a new OverlayScreen object in Javascript, passing either the message or an options object as a parameter.
         *
         * Options:
         *  spinner:        (int)       The size of the spinner to be displayed. Provide 0 or false to hide the spinner.
         *  message:        (string)    The message to be displayed
         *  showOnCreate:   (bool)      Should the screen be displayed automatically when the object is created
         *
         * Example:
         * new ScreenOverlay('Loading...');
         * new ScreenOverlay({
         *      spinner:        false,
         *      message:        'Loading...')
         * });
         *
         * Note:
         * Any desired styling for the overlay can be used. This component merely handles the Javascript functionality of creating the DOM elements, and
         * showing/hiding the overlay.
         *
         * @param (object) options - Options for the component
         * @constructor ScreenOverlay
         */
        window.ScreenOverlay = function(options)
        {
            this.init(options);
        }

        ScreenOverlay.prototype = $.extend({}, ScreenOverlay.prototype, {
            constructor: ScreenOverlay,
            init: function(options)
            {
                this.$element = null;
                if (typeof options == 'string')
                {
                    options = {
                        message: options
                    };
                }
                this.options = $.extend({}, {
                    message: 'Loading...',
                    spinner: 60,
                    showOnCreate: true
                }, options);
                this._buildElement();
            },
            _buildElement: function()
            {
                this.$element = $('<div class="ui-screen"></div>').hide();

                if (this.options.spinner)
                {
                    var spinner = new Spinner({
                        size: this.options.spinner
                    });
                    this.$element.append(spinner.getElement());
                }

                this.$element.append('<p>' + this.options.message + '</p>');

                $('body').prepend(this.$element);

                if (this.options.showOnCreate)
                {
                    this.show();
                }
            },
            show: function()
            {
                this.$element.fadeIn();
            },
            hide: function()
            {
                this.$element.fadeOut();
            },
            destroy: function()
            {
                this.$element.remove();
                this.$element = null;
            }
        });
    }

    if (typeof Spinner == 'undefined')
    {
        /**
         * Creates CSS-based spinner element, used for loading animations.
         *
         * Usage:
         * Add 'data-ui="spinner" attribute to an existing DIV element, or create a Spinner object directly in Javascript
         *
         * Options:
         *  size:       (int)   Size of the spinner to create
         *
         * Example:
         * <div data-ui="spinner" data-size="16"></div>
         * new Spinner({
         *      size: 16
         * });
         *
         * @param (DOM element) element - The element to create the component on
         * @param (object) options - Options for the component
         * @constructor Spinner
         */
        window.Spinner = function(element, options)
        {
            this.init(element, options);
        }

        Spinner.prototype = $.extend({}, Spinner.prototype, {
            constructor: Spinner,
            init: function(element, options)
            {
                if ($.isPlainObject(element) && !options)
                {
                    options = element;
                    element = null;
                }
                if (!element)
                {
                    element = $('<div>');
                }
                this.$element = $(element);
                this.options = $.extend({}, {
                    size: 16,
                    inline: false
                }, options, this.$element.data());
                this._buildElement();
                this.$element.data('Spinner', this);
            },
            _buildElement: function()
            {
                this.$element.addClass('ui-spinner');
                if (this.options.inline)
                {
                    this.$element.addClass('inline');
                }
                if (this.options.size)
                {
                    this.$element.css({
                        width: this.options.size + 'px',
                        height: this.options.size + 'px'
                    });
                }
                for (var i = 0; i < 12; i++)
                {
                    this.$element.append('<div class="ui-spinner-blade"></div>');
                }
            },
            getElement: function()
            {
                return this.$element;
            }
        });

        /**
         * Plugin definition for Spinner component
         *
         * @param (object) options
         * @returns (jQuery) Original jQuery object for chaining
         */
        $.fn.spinner = function(options)
        {
            return this.each(function()
            {
                new Spinner(this, options);
            });
        }
    }


    if (typeof TagSearch == 'undefined')
    {
        /**
         * Handles ajax searching of categories, stores, brands, and tags
         *
         * Usage:
         * Create a TagSearch object directly in Javascript
         *
         * Options:
         *  onSelect:   (function)          Callback function for when user selects a tag from the list. Function is sent the following parameters:
         *                                      tag:    Object containing the tag, tag ID, category ID, and tag text
         *                                      callback:   A function that MUST be called at the end of the external callback function
         *  tagList:    (jQuery|DOM|String) A UL element containing a list of selected tags to append new selections to
         *  ajaxUrl:    (string)            URL to be called to complete AJAX call. Must return a JSON array of matching tags
         *
         * Example:
         * $('#tagsearch').tagSearch({
         *      onSelect:   function(
         * });
         *
         * @param (DOM element) element - The element to create the component on
         * @param (object) options - Options for the component
         * @constructor TagSearch
         */
        window.TagSearch = function(element, options)
        {
            this.init(element, options);
        }

        TagSearch.prototype = $.extend({}, TagSearch.prototype, {
            constructor: TagSearch,
            init: function(element, options)
            {
                this.$element = $(element);
                // Make sure the same element doesn't get initialized twice
                if (!this.$element.data('TagSearch'))
                {
                    this.options = $.extend({}, {
                        onSelect: null,
                        tagList: null,
                        ajaxUrl: '/filtersuggest.php?limit=10&json=1&slug=1'
                    }, options, this.$element.data());

                    // Find the parent element containing the list of currently-selected tags
                    this.$tagListElm = null;
                    // tagList option was not provided
                    if (this.options.tagList === null)
                    {
                        // Search up the DOM tree for a parent element
                        this.$tagListElm = this.$element.parents('[data-role="tag-list"]');
                        // Still no parent element found, so search the entire DOM
                        if (!this.$tagListElm)
                        {
                            this.$tagListElm = $('[data-role="tag-list"]');
                        }
                    }
                    // tagList option is a DOM element or jQuery object
                    else if (typeof this.options.tagList == 'object')
                    {
                        // tagList option is a jQuery object
                        if (this.options.tagList instanceof jQuery)
                        {
                            this.$tagListElm = this.options.tagList;
                        }
                        // tagList option is a DOM element
                        else
                        {
                            this.$tagListElm = $(this.options.tagList);
                        }
                    }
                    // tagList option is a selector
                    else if (typeof this.options.tagList == 'string')
                    {
                        this.$tagListElm = $(this.options.tagList);
                    }
                    // Somebody screwed up and there isn't a valid option passed in tagList
                    else
                    {
                        throw "Valid parent tag list not provided.";
                    }

                    // Create the spinner to display while performing search
                    this.$spinnerElm = $('<div data-ui="spinner" data-size="16"></div>');
                    this._hideSpinner();
                    this.$element.after(this.$spinnerElm);
                    this.$spinnerElm.spinner();

                    // Create the list that will display matching tags
                    this.$matchesElm = $('<ul class="dropdown-menu" data-role="matched-tags" style="display: none;"></ul>');
                    this.$spinnerElm.after(this.$matchesElm);

                    // Trap clicks and close the list of matches if the click is anywhere else
                    $('body').on('click', function(event)
                    {
                        if (!$(event.target).parents('[data-role="add-tag"]').length)
                        {
                            this.hideMatches();
                        }
                    }.bind(this));

                    this.$element.on('keyup', this._handleKeyboardInput.bind(this))
                        .on('focus', this._handleInputFocus.bind(this));

                    this.searchTimer = null;

                    this.$element.data('TagSearch', this);
                }
            },
            /**
             * Display the list of matches when the input receives focus if there are matches
             *
             * @param   (object) event - Javascript event object
             * @private
             */
            _handleInputFocus: function(event)
            {
                if (this.$matchesElm.children('li').length > 0)
                {
                    this.showMatches();
                }
            },
            /**
             * Handle user keyboard actions in the filter input
             *
             * @param (object) event - Javascript event object
             * @private
             */
            _handleKeyboardInput: function(event)
            {
                // Make sure we're only working with alphanumeric characters, the ENTER key, the backspace key, the delete key, the period key, and the spacebar
                if (event.which == 13 || (event.which >= 65 && event.which <= 90) || (event.which >= 96 && event.which <= 105) || (event.which >= 48 && event.which <= 57) || event.which == 46 || event.which == 8 || event.which == 32 || event.which == 110 || event.which == 190)
                {
                    // If the user pressed ENTER, then we want to make sure any forms aren't submitted
                    if (event.which == 13)
                    {
                        event.preventDefault();
                    }
                    // Hide the matches list since the user input requires a new search
                    this.$matchesElm.filter(':visible').slideUp(200);
                    // Clear the previous timeout and we'll restart it later
                    clearTimeout(this.searchTimer);
                    // If we don't have more than 3 characters, then wait for the user to provide more input
                    if (this.$element.val().length < 3)
                    {
                        return;
                    }

                    // Set the timeout to make an ajax call to load new filters
                    this.searchTimer = setTimeout(function()
                    {
                        // Add the filter to the URL and override the built-in URL in _load()
                        this._load(this.options.ajaxUrl + '&q=' + encodeURIComponent(this.$element.val().toLowerCase()));
                    }.bind(this), 250);
                }
            },
            /**
             * Make ajax call to load tags using supplied URL or options URL
             *
             * @param (string) url - An option URL for the ajax call to override the one stored in this.options.ajaxUrl
             * @private
             */
            _load: function(url)
            {
                // Show the loading spinner
                this._showSpinner();
                // Make the ajax call and set up callbacks
                $.ajax(url ? url : this.options.ajaxUrl, {
                    context: this,
                    dataType: 'json',
                    error: this._ajaxError,
                    success: this._ajaxSuccess,
                    complete: this._hideSpinner
                });
            },
            /**
             * Hide the loading spinner
             *
             * @private
             */
            _hideSpinner: function()
            {
                if (this.$spinnerElm)
                {
                    this.$spinnerElm.hide();
                }
            },
            /**
             * Show the loading spinner
             *
             * @private
             */
            _showSpinner: function()
            {
                if (this.$spinnerElm)
                {
                    this.$spinnerElm.show();
                }
            },
            /**
             * Callback from _load() for an error with the ajax call
             *
             * @param (jqXHR) xhr - jqXHR object
             * @param (string) status - Text status of ajax call
             * @param (string) error - Error message
             * @private
             */
            _ajaxError: function(xhr, status, error)
            {
                // Display an error modal to the user, log the actual error to the console
                new ErrorModal('There was an error loading the filters.');
                console.log('TagSearch ajax error: ' + error);
            },
            /**
             * Callback from _load() to handle data returned from successful ajax call
             *
             * @param (array) data - JSON data returned by the server. In this instance, an array of available filters.
             * @param (string) status - Text status of ajax call
             * @param (jqXHR) xhr - jqXHR object
             * @private
             */
            _ajaxSuccess: function(data, status, xhr)
            {
                // If we have data, then we have matches
                if ($.isArray(data) && data.length || data.filters)
                {
                    this.$element.find('div[data-role="no-matches"]:visible').slideUp(200, function()
                    {
                        this.remove();
                    });
                    // Convert the returned JSON into usable data
                    var $tagList = this._buildTagList(data);
                    this.$matchesElm.css({width: this.$element.outerWidth() + 'px'});
                    this.$matchesElm.empty().append($tagList);
                    $tagList.on('click', this._selectTag.bind(this));
                    this.showMatches();
                }
                // If no data, then no matches
                else
                {
                    this.$matchesElm.empty()
                        .html('<li data-role="no-matches" class="no-matches">There were no tags matching your search</li>');
                    this.showMatches();
                }
            },
            /**
             * Build a collection of LI elements — one for each returned match
             *
             * @param (array) matches - An array of plain objects containing matched tags
             * @returns jQuery
             * @private
             */
            _buildTagList: function(matches)
            {
                var $returnElms = $();
                for (var i = 0; i < Math.min(matches.length, 10); i++)
                {
                    $returnElms = $returnElms.add('<li><a href="#" data-tag="' + matches[i].tag + '" data-slug="' + matches[i].slug + '" data-catid="' + matches[i].catid + '" data-tagid="' + matches[i].tagid + '">' + matches[i].name + '</a></li>');
                }
                return $returnElms;
            },
            /**
             * Action handler for user selecting a tag
             *
             * @param   (object) event - Javascript event object
             * @private
             */
            _selectTag: function(event)
            {
                event.preventDefault();
                // Stop propagation so dropdown menus containing tag search aren't hidden
                event.stopPropagation();
                var $elm = $(event.target);
                // Check for duplicate element and either highlight the duplicate or insert a new one
                var $duplicateElm = this.$tagListElm.find('a[data-tagid="' + $elm.data('tagid') + '"]').not($elm);
                if ($duplicateElm.length)
                {
                    this.hideMatches();
                    this._highlightTag($duplicateElm);
                }
                else
                {
                    // Insert a new element into the tag lsit
                    this._insertNewTag($elm);
                    // Tag is selected, so hide matches list
                    this.hideMatches();
                    // If the callback is a function, then call it. Otherwise call our callback directly. Replace with Promises eventually.
                    if ($.isFunction(this.options.onSelect))
                    {
                        // Add tagText to the attributes already attached to the selected tag
                        this.options.onSelect($.extend({}, $elm.data(), {
                            tagText: $elm.html()
                        }), this._selectTagCallback.bind(this));
                    }
                    else
                    {
                        this._selectTagCallback(true, $elm.data('tagid'));
                    }
                }
            },
            /**
             * A callback function that is called after any external scripts are done in the options.onSelect callback. This should be replaced by Promises eventually.
             *
             * @param (boolean) result - If whatever the external script performed was successful
             * @param (int) tagid - The tag id that was selected
             * @param (int) threadtagid - The threadtagid (if one was created)
             * @private
             */
            _selectTagCallback: function(result, tagid, threadtagid)
            {
                var $selectedTagElm = this.$matchesElm.find('a[data-tagid="' + tagid + '"]'),
                    $tagElm = this.$tagListElm.find('a[data-tagid="' + tagid + '"]').not($selectedTagElm),
                    $tagLiElm = $tagElm.parent(),
                    that = this;
                if (result)
                {
                    $tagLiElm.slideDown(200, function()
                    {
                        this._highlightTag($tagLiElm.children('a.tag'));
                    }.bind(this));
                    $selectedTagElm.parent('li').slideUp(200, function()
                    {
                        $(this).remove();
                        that.reset();
                        that.$element.focus();
                    });
                    if (threadtagid)
                    {
                        $tagElm.attr('data-threadtagid', threadtagid);
                    }
                }
                else if (!result)
                {
                    $tagLiElm.parents('li').slideUp(200, function()
                    {
                        $(this).remove();
                    });
                }
            },
            /**
             * Create a new LI element and add it to the tag list
             *
             * @param (jQuery) $elm - The LI element selected by the user
             * @private
             */
            _insertNewTag: function($elm)
            {
                var tagid = $elm.data('tagid'),
                    type = this._getTagType($elm);
                var $liElm = $('<li data-tag-type="' + type + '">' +
                    '<a href="' + this._buildTagUrl($elm) + '" data-tag="' + $elm.data('tag') + '" data-tagid="' + $elm.data('tagid') + '" class="tag tag_' + type + '">' + $elm.html().trim() + '</a>' +
                    '<a href="#" class="change icon icon-remove" data-role="remove-tag"></a>' +
                    '</li>').hide();
                this._getInsertLocation(type).after($liElm);
            },
            /**
             * Figure out where which section (Categories, Brands, Stores, Tags) the new element belongs to. If it doesn't belong, then create it.
             *
             * @param (string) type - The tag type (category, brand, store, tag)
             * @returns (jQuery) The element to insert the new tag element after
             * @private
             */
            _getInsertLocation: function(type)
            {
                // See if any tags for type already exist
                var $sectionElms = this.$tagListElm.children('li[data-tag-type="' + type + '"]');
                // If they exist already, then return the last one in the list
                if ($sectionElms.length)
                {
                    return $sectionElms.last();
                }
                // Otherwise create the section header and return it
                else
                {
                    var sectionTitle = '';
                    switch (type)
                    {
                        case 'brand':
                        case 'store':
                        case 'tag':
                            sectionTitle = type.charAt(0).toUpperCase() + type.slice(1) + 's';
                            break;
                        case 'category':
                            sectionTitle = 'Categories';
                            break;
                    }
                    var $liElm = $('<li><label>' + sectionTitle + '</label></li>').hide();
                    this.$tagListElm.append($liElm);
                    $liElm.slideDown(200);
                    return $liElm;
                }
            },
            /**
             * Element an element that is either a duplicate or has been newly added
             *
             * @param (jQuery) $elm - The element to highlight
             * @private
             */
            _highlightTag: function($elm)
            {
                // Add the higlight class
                $elm.addClass('highlight');
                // Add a class to enable animation and remove highlight class, triggering animation
                setTimeout(function()
                {
                    $elm.addClass('animate').removeClass('highlight');
                }, 1000);
                // Remove animate class to keep clean color change if element is highlighted again
                setTimeout(function()
                {
                    $elm.removeClass('animate');
                }, 3500);
            },
            /**
             * Determine tag type based on path displayed to user
             *
             * @param (jQuery) $elm - The element to determine the type of
             * @returns (string) The tag type
             * @private
             */
            _getTagType: function($elm)
            {
                var name = $elm.html().trim(),
                // Start with most generic type, then check for other tag types
                    type = 'tag';
                // Check if path is: Brands > [tag]
                if (name.indexOf('Brands') == 0)
                {
                    //name = name.replace('Brands &gt;', '');
                    type = 'brand';
                }
                // Check if path is: Stores > [tag]
                else if (name.indexOf('Stores') == 0)
                {
                    name = name.replace('Stores &gt;', '');
                    type = 'store';
                }
                // Otherwise if there is a catid, then it's a category
                else if ($elm.data('catid') > 0)
                {
                    type = 'category';
                }
                return type;
            },
            /**
             * Build the clickable URL for the tag list based on the tag type
             *
             * @param (jQuery) $elm - The element we're building the URL for
             * @returns {string}
             * @private
             */
            _buildTagUrl: function($elm)
            {
                var type = this._getTagType($elm),
                    url = '';
                switch (type)
                {
                    case 'category':
                        url = '/deals/' + $elm.data('slug').normalizeSlug() + '/';
                        break;

                    case 'store':
                        url = '/coupons/' + $elm.data('slug').normalizeSlug() + '/';
                        break;

                    default:
                    case 'brand':
                    case 'tag':
                        url = '/forums/forumdisplay.php?f=9&intagid[]=' + $elm.data('tagid');
                        break;
                }
                return url;
            },
            /**
             * Hide the matches list, if it's not already hidden
             */
            hideMatches: function()
            {
                if (this.$matchesElm.is(':visible'))
                {
                    this.$matchesElm.slideUp(200);
                }
            },
            /**
             * Show the matches list, if it's not already visible
             */
            showMatches: function()
            {
                if (!this.$matchesElm.is(':visible'))
                {
                    this.$matchesElm.slideDown(200);
                }
            },
            /**
             * Are there current matches for a search term?
             *
             * @returns (boolean) If there are matches
             */
            hasMatches: function()
            {
                return this.$matchesElm.find('a[data-tag]').length;
            },
            /**
             * Reset the component
             */
            reset: function()
            {
                this.$matchesElm.empty();
                this.$element.val('');
            }
        });

        /**
         * Plugin definition for TagSearch component
         *
         * @param (object) options
         * @returns (jQuery) Original jQuery object for chaining
         */
        $.fn.tagSearch = function(options)
        {
            return this.each(function()
            {
                new TagSearch(this, options);
            });
        }

    }


    if (typeof FileUpload == 'undefined')
    {
        /**
         * Allows styling of input[type="file"] form elements
         *
         * Usage:
         * Add 'data-ui="file-upload"' attribute to an existing input[type="file"] element
         *
         * Example:
         * <input type="file" name="transcript" id="transcript" data-ui="file-upload">
         *
         * Note:
         * Any attributes on the original input[type="file"] element other than type, name, and id will be moved to the new faux input field
         *
         * @param (DOM element) element - The element to create the component on
         * @constructor
         */
        window.FileUpload = function(element)
        {
            this.init(element);
        }

        FileUpload.prototype = $.extend({}, FileUpload.prototype, {
            constructor: FileUpload,
            init: function(element)
            {
                this.$element = $(element);
                this.$inputElm = null;

                if (!this.$element.data('FileUpload'))
                {
                    var $wrapperElm = $('<div class="ui-file-upload">'),
                        $uploadElm = $('<input type="file">'),
                        $inputElm = $('<input type="text" readonly>');

                    $.each(this.$element.get(0).attributes, function(idx, attr)
                    {
                        if (attr.name == 'id' || attr.name == 'name')
                        {
                            $uploadElm.attr(attr.nodeName, attr.nodeValue);
                        }
                        else if (attr.name != 'type')
                        {
                            $inputElm.attr(attr.nodeName, attr.nodeValue);
                        }
                    });

                    $wrapperElm.append($inputElm).
                        append('<div class="button"><span>Browse</span></div>');
                    $wrapperElm.find('div.button').append($uploadElm);

                    this.$element.replaceWith($wrapperElm);
                    this.$element = $wrapperElm.find('input[type="file"]');

                    this.$inputElm = $inputElm;

                    this.$element.on('change', this._handleFileSelect.bind(this));
                    this.$inputElm.on('click', this._handleInputClick.bind(this));

                    this.$element.data('FileUpload', this);
                }
            },
            _handleFileSelect: function(e)
            {
                this.$inputElm.val(this.$element.val().replace(/^.*(\\|\/|\:)/, ''));
                if (this.$inputElm.is('.parsley-error'))
                {
                    this.$inputElm.parsley().validate();
                }
            },
            _handleInputClick: function()
            {
                this.$element.click();
            }
        });

        /**
         * Plugin definition for FileUpload component
         *
         * @param (object) options
         * @returns (jQuery) Original jQuery object for chaining
         */
        $.fn.fileUpload = function(options)
        {
            return this.each(function()
            {
                new FileUpload(this, options);
            });
        }
    }



    if (typeof DatePlaceholder == 'undefined')
    {
        /**
         * ALlows an element to have an attribute changed when receiving focus
         *
         * Usage:
         * Add 'data-ui="change-on-focus"' attribute to an existing element and include the 'data-change-attribute' and 'data-change-to' option attributes.
         *
         * Example:
         * <input type="text" placeholder="Placeholder text" data-ui="change-on-focus" data-change-attribute="type" change-to="date">
         *
         * @param (DOM element) element - The element to create the component on
         * @param (object) options - Options for the component
         * @constructor ChangeOnFocus
         */
        window.DatePlaceholder = function(element, options)
        {
            this.init(element, options);
        }

        DatePlaceholder.prototype = $.extend({}, DatePlaceholder.prototype, {
            constructor: DatePlaceholder,
            init: function(element, options)
            {
                this.$element = $(element);

                // Make sure the same element doesn't get initialized twice
                if (!this.$element.data('DatePlaceholder'))
                {
                    this.options = $.extend({}, {
                        placeholder: '',
                    }, options, this.$element.data());

                    if (this.$element.attr('placeholder'))
                    {
                        this.options.placeholder = this.$element.attr('placeholder');
                    }

                    this.$element.wrap('<div class="ui-date-placeholder" />')
                        .after('<label>' + this.options.placeholder + '</label>');

                    this.$wrapperElm = this.$element.parent();

                    this.$element.on('focus', this._handleFocus.bind(this))
                        .on('blur', this._handleBlur.bind(this));

                    this.$element.data('DatePlaceholder', this);
                }
            },
            _handleFocus: function()
            {
                this.$wrapperElm.addClass('hide-label');
            },
            _handleBlur: function()
            {
                if (this.$element.val().trim() == '')
                {
                    this.$wrapperElm.removeClass('hide-label');
                }
                else
                {
                    if (this.$element.is('[data-parsley-error-message]'))
                    {
                        this.$element.parsley().validate();
                    }
                }
            }
        });

        $.fn.datePlaceholder = function(options)
        {
            return this.each(function()
            {
                new DatePlaceholder(this, options);
            });
        }
    }



    window.initComponents = function ()
    {
        $('[data-ui="clickable"]').clickable();
        $('[data-ui="collapsible"]').collapsible();
        $('[data-ui="date-placeholder"]').datePlaceholder();
        $('[data-ui="file-upload"]').fileUpload();
        $('[data-ui="tag-search"]').tagSearch();
        $('[data-ui*="tree-check"]').treeCheck();
        $('[data-ui="tree-view"]').treeView();
        $('[data-ui="spinner"]').spinner();
    };

    /**
     *  Initialize components through HTML data- attributes
     */
    $(document).ready(function()
    {
        initComponents();
        // Make sure initComponents can only be called once
        initComponents = $.noop;
    });

    window.ScrollManager = {
        keys: {37: 1, 38: 1, 39: 1, 40: 1},
        preventDefault: function (e) {
            e.preventDefault();
        },
        preventDefaultForScrollKeys: function (e) {
            if (this.keys[e.keyCode]) {
                this.preventDefault(e);
                return false;
            }
        },
        disableScroll: function () {
            $(window).on('DOMMouseScroll', this.preventDefault);
            $(window).on('wheel', this.preventDefault); // modern standard
            $(window).on('mousewheel', this.preventDefault); // older browsers, IE
            $(document).on('onmousewheel', this.preventDefault); // older browsers, IE
            $(window).on('touchmove', this.preventDefault); // mobile
            $(document).on('keydown', this.preventDefaultForScrollKeys);
        },
        enableScroll: function () {
            $(window).off('DOMMouseScroll', this.preventDefault);
            $(window).off('wheel', this.preventDefault);
            $(window).off('mousewheel', this.preventDefault);
            $(document).off('onmousewheel', this.preventDefault);
            $(window).off('touchmove', this.preventDefault);
            $(document).off('keydown', this.preventDefaultForScrollKeys);
        }
    };
}

;/**
 *
 *  Modal functions based on modern designs
 *
 *  Note: The inheritance in this class can be cleaned up substantially once IE8 support is dropped
 *
 */
if (typeof jQuery != 'undefined') {

    /*
        These modals will need to be updated to extend SD.Modals.Modal and ported over to the SD.Modals namespace
     */
    var ModernModal = function(options)
    {
        this.init(options);
    }

    ModernModal.prototype = {

        constructor: ModernModal,
        init: function (options)
        {

            this.options = $.extend(true, {
                message: '',
                headline: 'Alert',
                button: 'OK',
                className: [],
                closeButton: true,
                modalOptions: {
                    closeClass: 'simplemodal-close',
                    focus: false,
                    minWidth: 350,
                    maxHeight: 500,
                    maxWidth: 624,
                    overlayClose: true,
                    position: ['20%'],
                    onClose: this.close.bind(this)
                },
                onClose: $.noop,
                onShow: $.noop,
            }, options);

            this.$element = this.buildElement();

            this.$element.on('click', this.options.modalOptions.closeClass, this._onClose.bind(this));

            this.$element.modal(this.options.modalOptions);

            // Fix crappy height calculations in jquery.simplemodal
            $('#simplemodal-container').css('height', 'auto');

            if ($.isFunction(this.options.onShow))
            {
                this.options.onShow();
            }

        },
        buildElement: function()
        {
            return $('<div' + (this.options.id ? ' id="' + this.options.id + '"' : '') + ' class="modal modal-modern ' + (this.options.className.length ? this.options.className.join(' ') : '') + '" style="display: none;">'
                        + (this.options.closeButton ? '<div class="close"><span class="icon icon-close2 simplemodal-close"></span></div>' : '')
                        + '<div class="inner">'
                            + '<p>' + this.options.message + '</p>'
                        + '</div>'
                    + '</div>');
        },
        close: function()
        {
            this._onClose();
            // This is a very hacky way to get around jquery.simplemodal's terrible implementation of an onClose not-really-a-callback.
            $.modal.impl.o.onClose = null;
            $.modal.close();
        },
        _onClose: function()
        {
            if ($.isFunction(this.options.onClose))
            {
                this.options.onClose();
            }
        }
    };
    
    /**
     * Basic dialog box with a single close buttons and multiple messages
     *
     * @extends ModernModal
     */
    window.SimpleModal = function(options)
    {
        options.className = ModalUtilities.extendArray(options.className, 'modal-simple');
        ModernModal.call(this, $.extend(true, {
            message: 'This is default alert text. If you are seeing this, something went wrong. Please contact us at info@slickdeals.net if you continue to see this message.',
            headline: 'Alert',
            modalOptions: {
                maxWidth: 500
            }
        }, options));
    }

    SimpleModal.prototype = $.extend({}, ModernModal.prototype, {
        constructor: ModernModal,
        buildElement: function ()
        {
            // Call super buildElement function to get base modal
            var $elm = ModernModal.prototype.buildElement.call(this);

            // Add AlertModal-specific elements
            $elm.find('.inner').prepend('<div class="headline">' + this.options.headline + '</div>');

            return $elm;
        }
    });

    /**
     * Waiting dialog box with spinning wheel and message
     *
     * @extends ModernModal
     */
    window.WaitingModal = function(options) {
        options.className = ModalUtilities.extendArray(options.className, 'modal-waiting');
        ModernModal.call(this, $.extend(true, {
            message: 'This is default waiting text. If you are seeing this, something went wrong. Please contact us at info@slickdeals.net if you continue to see this message.',
            headline: 'Waiting',
            closeButton: false,
            modalOptions: {
                maxWidth: 500,
                overlayClose: false,
                escClose: false,
                focus: true,
            }
        }, options, {
            onClose: function () {
                $("#simplemodal-container").removeClass("modal-waiting");
                if ($.isFunction(options.onClose))
                {
                    options.onClose();
                }
            },
            onShow: function () {
                $("#simplemodal-container").addClass("modal-waiting");
                if ($.isFunction(options.onShow))
                {
                    options.onShow();
                }
            }
        }));
    };


    WaitingModal.prototype = $.extend({}, ModernModal.prototype, {
        constructor: ModernModal,
        buildElement: function ()
        {
            // Call super buildElement function to get base modal
            var $elm = ModernModal.prototype.buildElement.call(this);

            // Add WaitingModal-specific elements
            $innerHTML = $elm.find('.inner');
            $innerHTML.prepend('<div class="headline">' + this.options.headline + '</div>');

            // Spinning wheel
            $innerHTML.append('<img src=\"/images/slickdeals/ajaxlarge.gif\"></img>');

            return $elm;
        }
    });


    /**
     * Basic dialog box with a single button action
     *
     * @extends ModernModal
     */
    window.AlertModal = function(options)
    {
        options.className = ModalUtilities.extendArray(options.className, 'modal-alert');
        ModernModal.call(this, $.extend(true, {
            message: 'This is default alert text. You should not be reading this',
            headline: 'Alert',
            button: 'OK',
            bottomHtml: '',
            modalOptions: {
                maxWidth: 425
            }
        }, options));
    }

    AlertModal.prototype = $.extend({}, ModernModal.prototype, AlertModal.prototype, {
        constructor: AlertModal,
        buildElement: function ()
        {
            // Call super buildElement function to get base modal
            var $elm = ModernModal.prototype.buildElement.call(this);

            // Add AlertModal-specific elements
            $elm.find('.inner').prepend('<div class="headline">' + this.options.headline + '</div>');
            $elm.find('.inner').after('<div class="bottom"><button class="button simplemodal-close" data-role="close">' + this.options.button + '</button>' + (this.options.bottomHtml ? '<span class="bottom-html">' + this.options.bottomHtml + '</span>' : '') + '</div>');

            return $elm;
        }
    });



    /**
     * Error dialog box with a 'Close' button
     *
     * @extends AlertModal
     */
    window.ErrorModal = function(options)
    {
        if (typeof options == 'string')
        {
            options = {
                message: options
            };
        }

        options.className = ModalUtilities.extendArray(options.className, 'modal-error');
        AlertModal.call(this, $.extend(true, {
                message: 'There was an unspecified error. Please try again.',
                headline: 'Error',
                button: 'Close',
                modalOptions: {
                    overlayClose: false
                }
        }, options));
    }

    ErrorModal.prototype = $.extend({}, AlertModal.prototype, ErrorModal.prototype, {
        constructor: ErrorModal
    });


    /**
     * Dialog box with an action and cancel/close button
     *
     * @extends ModernModal
     */
    window.ConfirmModal = function(options)
    {

        options.className = ModalUtilities.extendArray(options.className, 'modal-confirm');

        ModernModal.call(this, $.extend(true, {
            headline: 'Do you really want to perform this action?',
            button: 'Cancel',
            confirmButton: 'OK',
            disableOnSubmit: true,
            modalOptions: {
                maxWidth: 624,
                minHeight: 201,
                overlayClose: false
            },
            onConfirm: $.noop,
            onCancel: $.noop,
        }, options));
    }

    ConfirmModal.prototype = $.extend({}, ModernModal.prototype, ConfirmModal.prototype, {
        constructor: ConfirmModal,
        buildElement: function ()
        {
            // Call super buildElement function to get base modal
            var $elm = ModernModal.prototype.buildElement.call(this);
            // Add ConfirmModal-specific elements
            $elm.find('.inner').prepend('<div class="headline">' + this.options.headline + '</div>');
            $elm.find('.inner').after('<div class="bottom"><button class="button simplemodal-close" data-role="close">' + this.options.button + '</button><button class="button primary" data-role="confirm">' + this.options.confirmButton + '</button></div>');
            $elm.find('span.simplemodal-close').attr('data-role', 'close');

            $elm.find('button[data-role="confirm"]').on('click', this.onConfirm.bind(this));
            $elm.find('[data-role="close"]').on('click', this.onCancel.bind(this));

            return $elm;
        },
        onCancel: function(event)
        {
            event.preventDefault();
            this.options.onCancel(this, event);
        },
        onConfirm: function(event)
        {
            event.preventDefault();
            if (this.options.disableOnSubmit)
            {
                this.$element.find('button').prop('disabled', true);
            }
            this.options.onConfirm(this, event);
        }
    });

    /**
     * A confirmation modal with a disclaimer text
     * @extends ConfirmModal
     */
    window.DisclaimerConfirmModal = function(options)
    {
        options.className = ModalUtilities.extendArray(options.className, 'modal-confirm');

        ConfirmModal.call(this, $.extend(true, {
            disclaimerText: 'You can always try again later'
        }, options));
    };

    DisclaimerConfirmModal.prototype = $.extend({}, ModernModal.prototype, ConfirmModal.prototype, DisclaimerConfirmModal.prototype, {
        constructor: DisclaimerConfirmModal,
        buildElement: function()
        {
            var $elm = ConfirmModal.prototype.buildElement.call(this);

            var newEl = $('<p>').addClass('disclaimer').append(this.options.disclaimerText);
            $elm.find('p').after(newEl);

            return $elm;
        }
    });

    /**
     * Dialog box presenting two options for user to choose from
     *
     * @extends ModernModal
     */
    window.OptionModal = function(options)
    {

        options.className = ModalUtilities.extendArray(options.className, 'modal-option');

        ModernModal.call(this, $.extend(true, {
            message: 'Which option would you like?',
            name: 'NAME',
            option1: 'Option 1',
            option2: 'Option 2',
            disableOnSubmit: true,
            modalOptions: {
                maxWidth: 400,
                overlayClose: false
            },
            onOptionSelect: $.noop
        }, options));
    }

    OptionModal.prototype = $.extend({}, ModernModal.prototype, OptionModal.prototype, {
        constructor: OptionModal,
        buildElement: function ()
        {
            // Call super buildElement function to get base modal
            var $elm = ModernModal.prototype.buildElement.call(this);
            // Add OptionModal-specific elements
            $elm.find('.inner p').addClass('message').html(this.options.message)
                                 .after('<div class="name">' + this.options.name + '</div>');
            $elm.find('.inner').append('<button class="button" data-option="1" data-option-text="' + this.options.option1 + '">' + this.options.option1 + '</button> or <button class="button" data-option="2" data-option-text="' + this.options.option2 + '">' + this.options.option2 + '</button></div>');

            $elm.find('button').on('click', this._handleOptionSelect.bind(this));

            return $elm;
        },
        _handleOptionSelect: function(event) {
            event.preventDefault();
            var $elm = $(event.delegateTarget);
            if (this.options.disableOnSubmit)
            {
                this.$element.find('button').prop('disabled', true);
            }
            this.options.onOptionSelect($elm.data('option'), $elm.data('optionText'), event);
        }
    });


    /**
     * Dialog box that prompts user for input
     *
     * @extends ModernModal
     */
    window.PromptModal = function(options)
    {
        options.className = ModalUtilities.extendArray(options.className, 'modal-prompt');
        ModernModal.call(this, $.extend(true, {
            headline: 'Input Required',
            message: 'Your input is required below.',
            button: 'Cancel',
            disableOnSubmit: true,
            submitButton: 'Save',
            onSubmit: $.noop,
            modalOptions: {
                maxWidth: 350,
                overlayClose: false,
                focus: true
            }
        }, options));
    }

    PromptModal.prototype = $.extend({}, ModernModal.prototype, PromptModal.prototype, {
        constructor: PromptModal,
        buildElement: function()
        {
            // Call super buildElement function to get base modal
            var $elm = ModernModal.prototype.buildElement.call(this);
            // Add PromptModal-specific elements
            $elm.find('.inner').prepend('<div class="headline">' + this.options.headline + '</div>');
            $elm.find('.inner').append('<input type="text" id="PromptModal-prompt">');
            $elm.find('.inner').after('<div class="bottom"><button class="button primary">' + this.options.submitButton + '</button><button class="button simplemodal-close">' + this.options.button + '</button></div>');

            $elm.find('button.primary').click(this.onSubmit.bind(this));
            $elm.find('input[type="text"]').on('keypress', this.checkKeypress.bind(this));

            return $elm;
        },
        onSubmit: function()
        {
            if (this.options.disableOnSubmit)
            {
                this.$element.find('button').prop('disabled', true);
            }
            if ($.isFunction(this.options.onSubmit))
            {
                this.options.onSubmit(this.$element.find('#PromptModal-prompt').val());
            }
        },
        checkKeypress: function(event)
        {
            if (event.which == 13)
            {
                this.onSubmit();
            }
        }
    });


    /**
     * Dialog box requesting a password from the user
     *
     * @extends PromptModal
     */
    window.PasswordModal = function(options)
    {
        options.className = ModalUtilities.extendArray(options.className, 'modal-password');
        PromptModal.call(this, $.extend(true, {
            headline: 'Login Required',
            message: 'Enter your password below.',
            button: 'Cancel',
            disableOnSubmit: true,
            submitButton: 'Login',
            onSubmit: $.noop,
            modalOptions: {
                maxWidth: 350,
                overlayClose: false,
                focus: true
            }
        }, options));
    }

    PasswordModal.prototype = $.extend({}, ModernModal.prototype, PromptModal.prototype, PasswordModal.prototype, {
        constructor : PasswordModal,
        buildElement: function ()
        {
            // Call super buildElement function to get base modal
            var $elm = PromptModal.prototype.buildElement.call(this);

            $elm.find('#PromptModal-prompt').replaceWith('<input type="password" id="PasswordModal-prompt">');

            $elm.find('#PasswordModal-prompt').on('keypress', this.checkKeypress.bind(this));

            return $elm;
        },
        onSubmit: function()
        {
            if (this.options.disableOnSubmit)
            {
                this.$element.find('button').prop('disabled', true);
            }
            if ($.isFunction(this.options.onSubmit))
            {
                this.options.onSubmit(this.$element.find('#PasswordModal-prompt').val());
            }
        }
    });

    /**
     * two button modal with the close option.
     *
     * @extends ModernModal
     */
    window.CloseOptionModal = function(options)
    {
        options.className = ModalUtilities.extendArray(options.className, 'modal-confirm');

        ModernModal.call(this, $.extend(true, {
            something: 'new',
        }, options));
    }

    CloseOptionModal.prototype = $.extend({}, ModernModal.prototype, CloseOptionModal.prototype, {
        constructor: CloseOptionModal,
        buildElement: function ()
        {
            // Call super buildElement function to get base modal
            var $elm = ModernModal.prototype.buildElement.call(this);

            // Add all elements for the modal
            var newEl = $('<p>').addClass('disclaimer').append(this.options.disclaimerText);
            $elm.find('p').after(newEl);
            $elm.find('.inner').prepend('<div class="close" data-role="close"><span class="icon icon-close2 simplemodal-close"></span></div>');
            $elm.find('.inner').prepend('<div class="headline">' + this.options.headline + '</div>');
            $elm.find('.inner').after('<div class="bottom"><button class="button simplemodal-close" data-role="leftButton">' + this.options.leftButton + '</button><button class="button primary" data-role="rightButton">' + this.options.rightButton + '</button></div>');

            // actions on clicks
            $elm.find('[data-role="leftButton"]').on('click', this.onLeftButtonClick.bind(this));
            $elm.find('button[data-role="rightButton"]').on('click', this.onRightButtonClick.bind(this));
            $elm.find('[data-role="close"], .simplemodal-overlay').on('click', this.onClose.bind(this));

            return $elm;
        },
        onLeftButtonClick: function(event)
        {
            event.preventDefault();
            this.close();
            this.options.onLeftButtonClick(this, event);
        },
        onRightButtonClick: function(event)
        {
            event.preventDefault();
            if (this.options.disableOnSubmit)
            {
                this.$element.find('button').prop('disabled', true);
            }
            this.options.onRightButtonClick(this, event);
        },
        onClose: function(event)
        {
            event.preventDefault();
            this.close();
        }
    });

    /**
     * Basic container modal for an iFrame based modal
     *
     * @extends ModernModal
     */
    window.IFrameModal = function(options)
    {
        options.className = ModalUtilities.extendArray(options.className, 'modal-iFrame');
        ModernModal.call(this, $.extend(true, {
            src: '',
            iFrameId: ''
        }, options));
    };

    IFrameModal.prototype = $.extend({}, ModernModal.prototype, IFrameModal.prototype, {
        constructor: IFrameModal,
        buildElement: function ()
        {
            // Call super buildElement function to get base modal
            var $elm = ModernModal.prototype.buildElement.call(this);

            // Add iFrameModal-specific elements
            $elm.find('.inner').addClass('iFrame').html('<iframe id="' + this.options.iFrameId + '" src="' + this.options.src + '"></iframe>');

            return $elm;
        }
    });

    /**
     * Utilties for modal classes
     */
    window.ModalUtilities = {
        extendArray: function(arr, val) {
            var retArr = [];
            // Manually push the class name since deep extending replaces arrays
            if ($.isArray(arr))
            {
                retArr = arr;
                retArr.push(val);
            }
            else
            {
                retArr = [val];
            }

            return retArr;
        }
    }

}
;/**
 * Courtesy of Mozilla MDN - https://developer.mozilla.org/en-US/docs/Web/API/Storage/LocalStorage
 */
if (!window.localStorage)
{
    window.localStorage = {
        getItem: function (sKey) {
            if (!sKey || !this.hasOwnProperty(sKey))
            {
                return null;
            }

            return unescape(document.cookie.replace(new RegExp("(?:^|.*;\\s*)" + escape(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=\\s*((?:[^;](?!;))*[^;]?).*"), "$1"));
        },
        key: function (nKeyId) {
            return unescape(document.cookie.replace(/\s*\=(?:.(?!;))*$/, "").split(/\s*\=(?:[^;](?!;))*[^;]?;\s*/)[nKeyId]);
        },
        setItem: function (sKey, sValue) {
            if(!sKey)
            {
                return;
            }

            document.cookie = escape(sKey) + "=" + escape(sValue) + "; expires=Tue, 19 Jan 2038 03:14:07 GMT; path=/";

            this.length = document.cookie.match(/\=/g).length;
        },
        length: 0,
        removeItem: function (sKey) {
            if (!sKey || !this.hasOwnProperty(sKey))
            {
                return;
            }

            document.cookie = escape(sKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/";

            this.length--;
        },
        hasOwnProperty: function (sKey) {
            return (new RegExp("(?:^|;\\s*)" + escape(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=")).test(document.cookie);
        }
    };

    window.localStorage.length = (document.cookie.match(/\=/g) || window.localStorage).length;
}

;/**
 * Also courtesy of Mozilla MDN - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON
 */
if (!window.JSON)
{
    window.JSON = {
        parse: function(sJSON) {
            return eval('(' + sJSON + ')');
        },
        stringify: (function () {
            var toString = Object.prototype.toString;
            var isArray = Array.isArray || function (a) { return toString.call(a) === '[object Array]'; };
            var escMap = {'"': '\\"', '\\': '\\\\', '\b': '\\b', '\f': '\\f', '\n': '\\n', '\r': '\\r', '\t': '\\t'};
            var escFunc = function (m) { return escMap[m] || '\\u' + (m.charCodeAt(0) + 0x10000).toString(16).substr(1); };
            var escRE = /[\\"\u0000-\u001F\u2028\u2029]/g;

            return function stringify(value) {
                if (value == null)
                {
                    return 'null';
                }
                else if (typeof value === 'number')
                {
                    return isFinite(value) ? value.toString() : 'null';
                }
                else if (typeof value === 'boolean')
                {
                    return value.toString();
                }
                else if (typeof value === 'object')
                {
                    if (typeof value.toJSON === 'function')
                    {
                        return stringify(value.toJSON());
                    }
                    else if (isArray(value))
                    {
                        var res = '[';

                        for (var i = 0; i < value.length; i++)
                        {
                            res += (i ? ', ' : '') + stringify(value[i]);
                        }

                        return res + ']';
                    }
                    else if (toString.call(value) === '[object Object]')
                    {
                        var tmp = [];

                        for (var k in value)
                        {
                            if (value.hasOwnProperty(k))
                            {
                                tmp.push(stringify(k) + ': ' + stringify(value[k]));
                            }
                        }

                        return '{' + tmp.join(', ') + '}';
                    }
                }

                return '"' + value.toString().replace(escRE, escFunc) + '"';
            };
        })()
    };
}


;if (typeof(window.SD) === "undefined")
{
    window.SD = {};
}

(function (SD) {
    if (!Element.prototype.matches)
    {
        Element.prototype.matches =
            Element.prototype.matchesSelector ||
            Element.prototype.mozMatchesSelector ||
            Element.prototype.msMatchesSelector ||
            Element.prototype.oMatchesSelector ||
            Element.prototype.webkitMatchesSelector ||
            function(s) {
                var matches = (this.document || this.ownerDocument).querySelectorAll(s),
                    i = matches.length;
                while (--i >= 0 && matches.item(i) !== this) {}
                return i > -1;
            };
    }
    var doubleLinkSelectors = [];

    SD.DoubleLink = {
        enable: function () {
            doubleLinkSelectors.push([ '[data-href2]', 'data-href2' ]);
        }
    };

    var processDoubleLink = function (el, attr, doubleLinkUrl)
    {
        // grab encoded URL & decode it before processing.
        var elem = document.createElement('textarea');

        elem.innerHTML = doubleLinkUrl;
        doubleLinkUrl = elem.value;

        SD.OutclickListener.hitManualOutclick(el, attr, doubleLinkUrl);
        if (el.target && el.target === '_blank')
        {
            window.setTimeout(function()
            {
                location.href = doubleLinkUrl;
            }, 100);
        }
        else
        {
            window.open(doubleLinkUrl);
            if (typeof $(el).data('defer-redirect') != 'undefined')
            {
                window.location = $(el).attr('href');
            }
        }
    };

    window.addEventListener('click', function (ev) {
        for (var i = 0; i < doubleLinkSelectors.length; i++)
        {
            var target = ev.target;
            var maxDepth = 10;

            while (target && maxDepth--)
            {
                if (target.matches && target.matches(doubleLinkSelectors[i][0]))
                {
                    if (target.hasAttribute(doubleLinkSelectors[i][1]))
                    {
                        // Prevent the default event when deferred to callback method.
                        if (typeof $(target).data('defer-redirect') != 'undefined')
                        {
                            ev.preventDefault();
                        }

                        processDoubleLink(target, doubleLinkSelectors[i][1], target.getAttribute(doubleLinkSelectors[i][1]));
                    }
                    return;
                }
                target = target.parentNode;
            }
        }
    });
})(SD);

;var sd_hotjar = sd_hotjar || function ()
{
    var h = window,
        o = document,
        t = '//static.hotjar.com/c/hotjar-',
        j = '.js?sv=';

    h.hj = h.hj || function ()
    {
        (h.hj.q = h.hj.q || []).push(arguments);
    };

    h._hjSettings = {
        hjid: 465821,
        hjsv: 5,
        // hjdebug: true
    };
    var a = o.getElementsByTagName('head')[0];
    var r = o.createElement('script');
    r.async = 1;
    r.src = t + h._hjSettings.hjid + j + h._hjSettings.hjsv;
    a.appendChild(r);
};